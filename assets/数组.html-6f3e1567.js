import{ac as e,H as o,I as c,G as n,U as s,O as t,ad as a,X as l}from"./framework-fadc5609.js";const i={},u=a(`<h2 id="数组简介和基本使用" tabindex="-1"><a class="header-anchor" href="#数组简介和基本使用" aria-hidden="true">#</a> 数组简介和基本使用</h2><h3 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h3><p>数组（Array），顾名思义，用来存储组相关的值，从而方便进行求和、计算平均数、逐项遍历等操作。</p><h3 id="定义方法" tabindex="-1"><a class="header-anchor" href="#定义方法" aria-hidden="true">#</a> 定义方法</h3><ol><li>var arr=[1,2,3]</li><li>var arr=new Array(1,2,3) //包装类</li><li>var arr=new Array(3) // 长度为 3 的数字，每一项都是 undefined</li></ol><h3 id="访问数组项" tabindex="-1"><a class="header-anchor" href="#访问数组项" aria-hidden="true">#</a> 访问数组项</h3><p>数组每一项都有下标，下标从 0 开始</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="下标越界" tabindex="-1"><a class="header-anchor" href="#下标越界" aria-hidden="true">#</a> 下标越界</h3><p>JavaScrip 规定，访问数组中不存在的项会返回 undefined，不会报错</p><h3 id="数组的长度" tabindex="-1"><a class="header-anchor" href="#数组的长度" aria-hidden="true">#</a> 数组的长度</h3><ul><li>数组的 length 属性表示它的长度</li><li>数组最后一项的下标是数组的长度减 1</li></ul><h3 id="更改数组项" tabindex="-1"><a class="header-anchor" href="#更改数组项" aria-hidden="true">#</a> 更改数组项</h3><ul><li>数组并不是只读的，我们可以修改它其中任何项的值</li><li>如果更改的数组项超过了 length-1，则会创造这项</li></ul><h3 id="数组的遍历" tabindex="-1"><a class="header-anchor" href="#数组的遍历" aria-hidden="true">#</a> 数组的遍历</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组类型的检测" tabindex="-1"><a class="header-anchor" href="#数组类型的检测" aria-hidden="true">#</a> 数组类型的检测</h3><ol><li>arr instanceof Array // 返回 true</li><li>arr.isArray()方法</li></ol><h2 id="数组的常用方法" tabindex="-1"><a class="header-anchor" href="#数组的常用方法" aria-hidden="true">#</a> 数组的常用方法</h2>`,19),r={href:"https://juejin.cn/post/6850418121074573320",target:"_blank",rel:"noopener noreferrer"},d=a(`<h3 id="数组的头尾操作" tabindex="-1"><a class="header-anchor" href="#数组的头尾操作" aria-hidden="true">#</a> 数组的头尾操作</h3><ol><li>push()</li></ol><ul><li>push()方法用来在<strong>数组末尾</strong>推入新项，参数就是要推入的项</li><li>如果要推入多项，可以用逗号隔开</li><li>调用 push()方法后，数组会立即改变，不需要赋值</li><li>该方法会返回新的长度</li></ul><ol start="2"><li>pop()</li></ol><ul><li>与 push()相反，pop()方法用来删除数组中的<strong>最后一项</strong></li><li>pop()方法不仅会删除数组末项，而且会<strong>返回被删除的项</strong></li></ul><ol start="3"><li>unshift()</li></ol><ul><li>unshift()方法用来在<strong>数组头部</strong>插入新项，参数就是要插入的项</li><li>如果要插入多项，可以用逗号隔开</li><li>调用 unshift()方法后，数组会立即改变，不需要赋值</li><li>该方法会返回新的长度</li></ul><ol start="4"><li>shift()</li></ol><ul><li>与 unshift()相反， shift()方法用来删除数组中<strong>下标为 0</strong>的项</li><li>shift()方法不仅会删除数组首项，而且<strong>会返回被删除的项</strong></li></ul><h3 id="splice" tabindex="-1"><a class="header-anchor" href="#splice" aria-hidden="true">#</a> splice()</h3><ul><li>splice()方法用于<strong>替换数组中的指定项</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">//从下标为1的项开始，连续替换两项</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// [3,4,5,4]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>splice()方法可以用于在<strong>指定位置插入新项</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token comment">// 在下标为1的位置插入两项，不替换</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// [3,6,7,1,3,4]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>splice()方法可以用于<strong>删除指定项</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 没有设置替换的新项，仅删除1项</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// [3,3,4]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>splice()方法会以<strong>数组形式</strong>返回被删除的项</li></ul><h3 id="slice" tabindex="-1"><a class="header-anchor" href="#slice" aria-hidden="true">#</a> slice()</h3><ul><li>slice()方法返回一个新的数组对象，这一对象是一个由 <code>begin</code> 和 <code>end</code> 决定的原数组的<strong>浅拷贝</strong></li><li>slice(a,b)截取的子数组从下标为 a 的项开始，到下标为 b（但<strong>不包括下标为 b 的项</strong>）结束</li><li>slice(a,b)方法<strong>不会更改原有数组</strong></li><li>slice()如果不提供第二个参数，则表示从指定项开始，提取所有后续所有项作为子数组</li><li>slice()方法的参数允许为负数，表示<strong>数组的倒数第几项</strong></li><li>如果同时省略<code>begin</code> 和 <code>end</code>参数，将<strong>返回一个原数组的浅拷贝</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 浅拷贝</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token number">3</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39; kobe&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
<span class="token keyword">let</span> arr3 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
arr3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string">&#39;wade&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// [ 1, 3, { username: &#39;wade&#39; } ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="join-和-split" tabindex="-1"><a class="header-anchor" href="#join-和-split" aria-hidden="true">#</a> join()和 split()</h3><p>数组的 <strong>join()方法可以使数组转为字符串</strong>；字符串的<strong>split()方法可以使字符串转为数组</strong>。</p><ul><li>join()的参数表示以什么字符作为连接符，如果留空则默认以逗号分隔，如同调用 tostring()方法</li><li>split()的参数表示以什么字符拆分字符串，一般不能留空=&gt;(str.split(&#39;&#39;))</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;abcd&#39;</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39; ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>字符串和数组更多相关性</p><ul><li>字符串也可以使用方括号内写下标的形式，访问某个字符等价于 charAt()方法,意味着字符串可以直接遍历</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;123456&#39;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>字符串的一些算法问题有时候会转换为数组解决</li></ul><h3 id="concat" tabindex="-1"><a class="header-anchor" href="#concat" aria-hidden="true">#</a> concat()</h3><p>concat() 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组</p><p>参数：数组和/或值，将被合并到一个新的数组中。如果没有参数，则 concat 会返回调用此方法的现存数组的一个<strong>浅拷贝</strong></p><p>返回值：一个新的数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> array2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;f&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> array3 <span class="token operator">=</span> array1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>array2<span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array3<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reverse" tabindex="-1"><a class="header-anchor" href="#reverse" aria-hidden="true">#</a> reverse()</h3><p>reverse()方法用来将一个数组中的全部项顺序置反</p><h3 id="indexof-和-includes" tabindex="-1"><a class="header-anchor" href="#indexof-和-includes" aria-hidden="true">#</a> indexOf()和 includes()</h3><ul><li>indexOf()方法的功能是搜索数组中的元素，并返回它所在的位置，如果元素不存在，则返回-1</li><li>includes()方法的功能是判断一个数组是否包含一个指定的值，返回布尔值</li></ul><h3 id="find" tabindex="-1"><a class="header-anchor" href="#find" aria-hidden="true">#</a> find()</h3><p><strong><code>find()</code></strong> 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 <code>undefined</code></p><p><code>callback</code>参数：当前遍历到的元素,当前遍历到的索引,数组本身</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span>

<span class="token keyword">const</span> found <span class="token operator">=</span> array1<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">element</span> <span class="token operator">=&gt;</span> element <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span>
<span class="token comment">// expected output: 12</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="filter" tabindex="-1"><a class="header-anchor" href="#filter" aria-hidden="true">#</a> filter()</h3><p>filter() 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。</p><p>返回值：一个新的、由通过测试的元素组成的数组，如果没有任何数组元素通过测试，则返回空数组。</p><p>callback(用来测试数组的每个元素的函数。返回 true 表示该元素通过测试，保留该元素，false 则不保留。)被调用时传入三个参数：元素的值，元素的索引，被遍历的数组本身</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;spray&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;limit&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;elite&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;exuberant&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;destruction&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;present&#39;</span><span class="token punctuation">]</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">word</span> <span class="token operator">=&gt;</span> word<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">6</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token comment">// expected output: Array [&quot;exuberant&quot;, &quot;destruction&quot;, &quot;present&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="foreach" tabindex="-1"><a class="header-anchor" href="#foreach" aria-hidden="true">#</a> forEach()</h3><p>forEach() 方法对数组的每个元素执行一次给定的函数</p><p>返回值：undefined</p><p>callback 被调用时传入三个参数：数组当前项的值，数组当前项的索引，数组对象本身</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span>

array1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">element</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// expected output: &quot;a&quot;</span>
<span class="token comment">// expected output: &quot;b&quot;</span>
<span class="token comment">// expected output: &quot;c&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,51),k={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#%E5%A6%82%E6%9E%9C%E6%95%B0%E7%BB%84%E5%9C%A8%E8%BF%AD%E4%BB%A3%E6%97%B6%E8%A2%AB%E4%BF%AE%E6%94%B9%E4%BA%86%EF%BC%8C%E5%88%99%E5%85%B6%E4%BB%96%E5%85%83%E7%B4%A0%E4%BC%9A%E8%A2%AB%E8%B7%B3%E8%BF%87%E3%80%82",target:"_blank",rel:"noopener noreferrer"},v=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;two&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;three&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;four&#39;</span><span class="token punctuation">]</span>
words<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>word <span class="token operator">===</span> <span class="token string">&#39;two&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    words<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// one</span>
<span class="token comment">// two</span>
<span class="token comment">// four</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> map()</h3><p><code>map()</code>方法的回调函数每次执行后的返回值组合起来形成一个新数组</p><p><code>返回值</code>：<strong>一个由原数组每个元素执行回调函数的结果组成的新数组</strong>。</p><p><code>callback</code> 被调用时传入三个参数：<code>数组元素</code>，<code>元素索引</code>，<code>原数组本身</code>;<code>callback</code> 每次执行后的返回值（包括 <code>undefined</code>）组合起来形成一个新数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span>

<span class="token comment">// pass a function to map</span>
<span class="token keyword">const</span> map1 <span class="token operator">=</span> array1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token number">2</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map1<span class="token punctuation">)</span>
<span class="token comment">// expected output: Array [2, 8, 18, 32]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),m={class:"hint-container tip"},b=a('<p class="hint-container-title">forEach() 和 map() 的区别</p><p><strong>返回值</strong>:forEach()方法返回 undefined ，而 map()返回一个包含已转换元素的新数组</p><p><strong>链接其他方法</strong>:map()方法输出可以与其他方法(如 reduce()、sort()、filter())链接在一起，以便在一条语句中执行多个操作。另一方面，forEach()不能与其他方法链接，因为它返回 undefined。</p><p><strong>性能</strong>:map()方法比 forEach()转换元素要好。</p><p><strong>中断遍历</strong>:这两种方法都不能用 break 中断，否则会引发异常</p><p>建议使用 map()转换数组的元素，因为它语法短，可链接且性能更好。</p><p>如果不想返回的数组或不转换数组的元素，则使用 forEach() 方法。</p><p>最后，<strong>如果要基于某种条件停止或中断数组的遍历，则应使用简单的 for 循环或 for-of / for-in 循环。</strong></p>',8),h={href:"https://blog.csdn.net/weixin_46837985/article/details/112211133",target:"_blank",rel:"noopener noreferrer"},g=a(`<h3 id="reduce" tabindex="-1"><a class="header-anchor" href="#reduce" aria-hidden="true">#</a> reduce()</h3><p>reduce() 方法对数组中的每个元素执行一个由您提供的 <code>reducer</code> 函数，将其结果汇总为单个返回值。</p><p>返回值：<strong>函数累计处理的结果</strong></p><p>参数：<code>reducer</code> 函数,<code>initialValue</code></p><p>reducer 函数接收 4 个参数:</p><ul><li><code>previousValue</code> (pre) (上一次调用 reducer 函数的返回值)</li><li><code>currentValue</code> (cur) (数组中正在处理的元素)</li><li><code>currentIndex</code>(idx) (数组中正在处理的元素的索引 )</li><li><code>array</code> (arr) (用于遍历的数组)</li></ul><p>每一次运行 <code>reducer</code>函数会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值。</p><p><code>initialValue</code>(可选): 作为第一次调用 <code>reducer</code>函数时的<code>previousValue </code>的值。如果没有提供初始值，则将使用数组中的第一个元素,<code>currentValue</code> 将使用数组第二个元素;若指定了初始值 <code>initialValue</code>，则 <code>currentValue</code> 则将使用数组第一个元素</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
total <span class="token operator">=</span> array1<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> acc <span class="token operator">+</span> cur
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span> <span class="token comment">//10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sort" tabindex="-1"><a class="header-anchor" href="#sort" aria-hidden="true">#</a> sort()</h3><p><code>特别注意</code>：sort 方法的返回值是<strong>对原数组的<code>引用</code></strong>。数组在原数组上进行排序，不生成副本。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">-</span> b
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// [ -1, 0, 1, 2, 123 ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token operator">===</span> arr2<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),f={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort",target:"_blank",rel:"noopener noreferrer"},j=a(`<ul><li>升序排序</li></ul><p><code>arrObject.sort(function(a,b){return a-b})</code></p><p>当 a==b 时，返回值是 0，a 和 b 不用交换位置。</p><p>当 a&gt;b 时，返回值大于 0，a 放置在 b 后面。</p><p>当 a&lt; b 时，返回值小于 0，a 和 b 不用交换位置。</p><ul><li>降序排序</li></ul><p><code>arrObject.sort(function(a,b){return b-a})</code></p><p>当 a==b 时，返回值是 0，a 和 b 不用交换位置。</p><p>当 a&gt;b 时，返回值小于 0，a 和 b 不用交换位置。</p><p>当 a&lt; b 时，返回值大于 0，a 放置在 b 后面。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><div class="hint-container warning"><p class="hint-container-title">注意</p><p>后面括号中为该方法是否改变原数组</p></div><ul><li>push：用来在数组末尾推入新项（改变）</li><li>pop：用来删除数组中的最后一项（改变）</li><li>unshift：用来在数组开头插入新项（改变）</li><li>shift：用来删除数组中的第一个元素（改变）</li><li>splice：用于替换数组中的指定项（改变）</li><li>reverse：用来将一个数组中的全部项顺序置反（改变）</li><li>slice：用于得到子数组（不改变）</li><li>join： 使数组转为字符串（不改变）</li><li>concat：合并连接多个数组,<strong>返回一个新的数组</strong>（不改变）</li><li>indexOf：搜索数组中的元素，并返回它所在的位置（不改变）</li><li>includes：判断一个数组是否包含一个指定的值（不改变）</li><li>sort: 在原数组上进行排序，<strong>不生成副本</strong>（改变）</li><li>fifter: <strong>创建一个新数组</strong>, 其包含通过所提供函数实现的测试的所有元素（不改变）</li><li>forEach: 对数组的每个元素执行一次给定的函数,<strong>返回值为 undefined</strong>（不改变:<code>forEach</code> 不会直接改变调用它的对象，但是那个对象可能会被 <code>callback</code> 函数改变）</li><li>map: <strong>创建一个新数组</strong>, 新数组中的元素是原数组中的<strong>每个元素调用一次提供的函数后的返回值</strong>（不改变）</li><li>reduce: 对数组中的每个元素执行一个由您提供的 reducer 函数(升序执行)，将其结果<strong>汇总为单个返回值</strong>（不改变）</li></ul><h2 id="数组相关算法" tabindex="-1"><a class="header-anchor" href="#数组相关算法" aria-hidden="true">#</a> 数组相关算法</h2><h3 id="数组遍历" tabindex="-1"><a class="header-anchor" href="#数组遍历" aria-hidden="true">#</a> 数组遍历</h3><ul><li>求数组的和，平均数</li><li>求数组的最大值，最小值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 求数组的最大值，最小值</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> min <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    min <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;最大值&#39;</span> <span class="token operator">+</span> max <span class="token operator">+</span> <span class="token string">&#39;&lt;br&gt;&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;最小值&#39;</span> <span class="token operator">+</span> min<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组去重" tabindex="-1"><a class="header-anchor" href="#数组去重" aria-hidden="true">#</a> 数组去重</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 算法思路：准备一个空数组，遍历原数组，如果遍历到的项不在结果数组内，则推入结果数组</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>
<span class="token comment">//  结果数组</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// include 是判断一个数组是否包含一个指定的值</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//  在数组尾部插入新项</span>
    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="随机样本" tabindex="-1"><a class="header-anchor" href="#随机样本" aria-hidden="true">#</a> 随机样本</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 算法思路：准备一个空数组，遍历原数组，随机选择一项，推入结果数组，并且将这项删除</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>
<span class="token comment">// 结果数组</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> n <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
  result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>
  arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="冒泡排序" tabindex="-1"><a class="header-anchor" href="#冒泡排序" aria-hidden="true">#</a> 冒泡排序</h3><p>冒洵排序的核心思路是<strong>一趟一趟地进行多次项的两两比较</strong>每次都会将最小的元素排好位置，如同水中的气泡上浮一样</p><p><img src="https://zfh-nanjing-bucket.oss-cn-nanjing.aliyuncs.com/blog-images/冒泡排序1.png" alt="冒泡排序1"><img src="https://zfh-nanjing-bucket.oss-cn-nanjing.aliyuncs.com/blog-images/冒泡排序2.png" alt="冒泡排序2"><img src="https://zfh-nanjing-bucket.oss-cn-nanjing.aliyuncs.com/blog-images/冒泡排序3.png" alt="冒泡排序3"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//  j&gt;=i ?  j代表的就是数组的下标数,总是结束在趟号那项,j=i就是最后一次比较</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 内层循环负责两个数字进行比较，如果前一项大于这一项，则两项更换位置</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// var temp = arr[j-1]</span>
      <span class="token comment">// arr[j-1] = arr[j]</span>
      <span class="token comment">// arr[j] =temp</span>
      <span class="token comment">// 解构赋值</span>
      <span class="token punctuation">;</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>4 个数字，共需要比较 3 趟，比较次数为 3+2+1=6 次</li><li>n 个数字，共需要比较 n-1 趟，比较次数为 n（n-1）/2 次。</li></ul><h2 id="二维数组" tabindex="-1"><a class="header-anchor" href="#二维数组" aria-hidden="true">#</a> 二维数组</h2><p>以数组作为数组元素的数组，即“数组的数组“</p>`,28);function y(x,w){const p=l("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[n("a",r,[s("[7000 字]JavaScript 数组所有方法基础总结"),t(p)])]),d,n("p",null,[s("请注意"),n("a",k,[s("如果数组在迭代时被修改了，则其他元素会被跳过"),t(p)])]),v,n("div",m,[b,n("p",null,[s("参考："),n("a",h,[s("数组中 forEach() 和 map() 的区别"),t(p)])])]),g,n("p",null,[n("a",f,[s("Array.prototype.sort()"),t(p)])]),j])}const E=e(i,[["render",y],["__file","数组.html.vue"]]);export{E as default};
