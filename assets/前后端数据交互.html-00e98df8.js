import{ac as p,H as o,I as c,G as n,U as s,O as t,ad as e,X as l}from"./framework-fadc5609.js";const i={},u=e('<p>// TODO：重整</p><h2 id="前后端数据交互" tabindex="-1"><a class="header-anchor" href="#前后端数据交互" aria-hidden="true">#</a> 前后端数据交互</h2><h3 id="初始前后端通信" tabindex="-1"><a class="header-anchor" href="#初始前后端通信" aria-hidden="true">#</a> 初始前后端通信</h3><p>前后端通信方式什么？</p><p>前端和后端数据交互的过程&lt;=&gt;浏览器和服务器交互的过程</p><p>前端向后端发送数据：</p><p>1.登录功能</p><p>2.搜索功能</p><p>后端向前端发送数据：</p><p>页面上的图、文字等内容</p><h3 id="前后端通信的过程与概念解释" tabindex="-1"><a class="header-anchor" href="#前后端通信的过程与概念解释" aria-hidden="true">#</a> 前后端通信的过程与概念解释</h3><ol><li><p>前后端通信的过程<br> 前后端通信是在 <code>请求-响应</code> 中完成的</p></li><li><p>概念解释</p></li></ol><ul><li>前端：<code>浏览器端</code></li><li>客户端：只要能和通信的就叫<code>客户端</code></li><li>后端：<code>服务器端</code></li></ul><h3 id="前后端的通信方式" tabindex="-1"><a class="header-anchor" href="#前后端的通信方式" aria-hidden="true">#</a> 前后端的通信方式</h3><ol><li>使用浏览器访问网页</li></ol><p>在浏览器地址栏输入网址，按下回车</p><ol start="2"><li>Html 的标签</li></ol><p>浏览器在解析 Html 标签的时候，遇到一些特殊的标签( <code>link</code> <code>img</code> <code>script</code> <code>iframe</code> )，会再次向服务器发送请求</p><p>还有一些标签(<code>a</code>,<code>from(表单)</code>)，浏览器解析的时候，不会向服务器发送请求，但是用户可以使用他们向服务器发送请求</p><ol start="3"><li>Ajax Fetch</li></ol><h2 id="服务端职责" tabindex="-1"><a class="header-anchor" href="#服务端职责" aria-hidden="true">#</a> 服务端职责</h2><ul><li>处理 <code>HTTP</code> 请求(<code>req</code>,<code>res</code>)</li><li>定义路由,供前端 <code>Ajax</code> 访问</li><li>使用数据库，存储和查询数据</li></ul><h2 id="服务端处理数据-路由" tabindex="-1"><a class="header-anchor" href="#服务端处理数据-路由" aria-hidden="true">#</a> 服务端处理数据:路由</h2><div class="hint-container tip"><p class="hint-container-title">路由和 URL 的关系</p><p><code>GET /api/list 路由 ---&gt; axios.get(&#39;api/list?a=1&#39;)</code></p><p><strong>路由是规则，url 是具体的形式</strong>两者不同</p></div><p>路由是<strong>服务端的入口规则</strong>，也是与前端的“约定”</p><p>路由主要包含：</p><ul><li>定义 <code>method</code>，如 <code>GET</code>,<code>POST</code> 等</li><li>定义 <code>url</code> 规则，如<code>/api/list</code> 和<code>/api/create</code></li><li>定义输入<code>Request body</code>和输出<code>Response body</code>格式</li></ul><h2 id="http-协议" tabindex="-1"><a class="header-anchor" href="#http-协议" aria-hidden="true">#</a> HTTP 协议</h2><h3 id="初识-http" tabindex="-1"><a class="header-anchor" href="#初识-http" aria-hidden="true">#</a> 初识 HTTP</h3><p><code>http</code>协议规定了客户端和服务端如何通讯</p><ul><li><code>url</code>：后端接口的地址，即前端 <code>Ajax</code> 请求时的地址</li><li><code>method</code>：请求方法，如 <code>GET</code> <code>POST</code> <code>PUT</code> <code>DELETE</code> 等</li><li>状态码：接口返回的状态，如 <code>200</code> <code>302</code> <code>404</code> <code>500</code> 等</li><li><code>Request</code>：请求</li><li><code>Request Body</code>：请求时发送给后端的数据</li><li><code>Request Content-type</code>：发送数据的格式，如 <code>json</code></li><li><code>Response</code>：响应</li><li><code>Response Body</code>：后端返回给前端的数据</li><li><code>Response Content-type</code>：返回数据的格式，如 <code>json</code></li></ul><ol><li>HTTP (<code>hypeText Transfer Protocol</code>:超文本传输协议)</li></ol><p><code>HTML</code>:超文本标记语言，超文本：原先一个个单一的文本，通过超链接将其联系起来。由原先的单一的文本变成了可无限伸、扩展的超級文本、立体文本</p><p>HTML、JS、CSS、图片、字体、音频、视频等等文件，都是通过<code>HTTP</code>在服务器和浏览器之间传输</p><p>每一次前后端通信，前端需要主动向后端发岀请求，后端接收到前端的请求后，可以给出响应</p><p><code>HTTP</code>是一个请求-响应协议</p><ol start="2"><li>HTTP 请求响应的过程</li></ol><figure><img src="https://zfh-nanjing-bucket.oss-cn-nanjing.aliyuncs.com/blog-images/HTTP请求响应的过程.png" alt="HTTP请求响应的过程" tabindex="0"><figcaption>HTTP请求响应的过程</figcaption></figure><ul><li>浏览器地址栏输入 URL 并回车</li><li>浏览器查找当前 URL 是否存在缓存，并比较缓存是否过期</li><li>DNS 解析 URL 对应的 IP</li><li>根据 IP 建立 TCP 连接（三次握手）</li><li>发送 http 请求</li><li>服务器处理请求，浏览器接受 HTTP 响应</li><li>浏览器解析并渲染页面</li><li>关闭 TCP 连接（四次挥手）</li></ul><h3 id="http-报文" tabindex="-1"><a class="header-anchor" href="#http-报文" aria-hidden="true">#</a> http 报文</h3><ol><li>HTTP 报文是什么</li></ol><ul><li>浏览器向服务器发送请求的时候，请求本身就是信息，叫<code>请求报文</code></li><li>服务器向浏览器发送响应时传输的信息，叫<code>响应报文</code></li></ul><ol start="2"><li>HTTP 报文格式 // TODO：复查 2022.3.22</li></ol><ul><li>请求</li></ul><ol><li>请求头：起始行(黄色高亮部分)+首部（剩余部分为首部）</li></ol><figure><img src="https://zfh-nanjing-bucket.oss-cn-nanjing.aliyuncs.com/blog-images/起始行.png" alt="起始行" tabindex="0"><figcaption>起始行</figcaption></figure><ol start="2"><li>请求体</li></ol><p>GET 请求没有请求体，数据是通过请求头携带</p><p>POST 请求，有请求体，数据通过请求体携带</p><ul><li>响应</li></ul><ol><li>响应头：起始行+首部</li><li>响应体</li></ol><h3 id="http-方法" tabindex="-1"><a class="header-anchor" href="#http-方法" aria-hidden="true">#</a> HTTP 方法</h3><ol><li>常用的 HTTP 方法</li></ol><p>浏览器发送<strong>请求</strong>时采用的方法。和响应<strong>无关</strong></p><p><code>GET</code> <code>POST</code> <code>PUT</code> <code>DELETE</code></p><p>用来定义对于资源采取什么样的操作的，有各自的语义</p><ol start="2"><li>HTTP 方法的语义</li></ol><ul><li><code>GET</code> 获取数据 -<code>POST</code> 创建数据</li><li><code>PUT</code> 更新数据(修改个人信息 修改密码) -<code>DELETE</code> 删除数据</li></ul><p>这些方法虽然有各自的语义，但是并不是强制性的</p><p>3.RESTful 接口设计</p><p>一种接口设计风格， 充分利用 HTTP 方法的语义</p><ul><li>普通方法：</li></ul><p>① 通过用户 ID 获取用户个人信息，使用 GET 方法<code>https://www.xxx.com/api/http/getUser?id=1</code></p><p>② 注册新用户，使用 POST 方法<code>https://www.xxx.com/api/http/addUser</code></p><p>③ 修改一个用户，使用 POST 方法<code>https://www.xxx.com/api/http/modifuUser</code></p><p>③ 删除一个用户，使用 POST 方法 <code>https://www.xxx.com/api/http/deleteUser</code></p><ul><li>RESTful 接口风格</li></ul><p>只需要定义一个接口：<code>https://www.xxx.com/api/http/User</code></p><p>分别通过四种语义的方法：GET(获取信息)、POST(注册用户)、PUT(修改信息)、DELETE(删除信息)</p><h3 id="get-和-post-方法的对比" tabindex="-1"><a class="header-anchor" href="#get-和-post-方法的对比" aria-hidden="true">#</a> GET 和 POST 方法的对比</h3><ol><li><p>语义：<code>GET</code>：获取数据,<code>POST</code>:创建数据</p></li><li><p>发送数据</p></li></ol><p>GET 通过地址在请求头中携带数据,能携带的数据和地址的长度有关，一般最多就几 K</p><p>POST 既可以通过地址在请求头中携带数据，也可以通过请求体携带数据,能携带的数据理论上是无限量的</p><p><strong><em>携带少量数据，可以使用 GET 请求。大量的数据可以使用 POST 请求</em></strong></p><ol start="3"><li><p>缓存：Get 可以被缓存，post 不会被缓存</p></li><li><p>安全性：<strong>GET 和 POST 都不安全</strong></p></li></ol><h3 id="http-状态码" tabindex="-1"><a class="header-anchor" href="#http-状态码" aria-hidden="true">#</a> HTTP 状态码</h3>',76),r={href:"https://www.runoob.com/http/http-status-codes.html",target:"_blank",rel:"noopener noreferrer"},d=e(`<p><strong><em>定义服务器对请求的处理结果，是服务器返回的</em></strong></p><p><code>100-199</code>=&gt;<strong>消息</strong>:代表请求已经被接受，需要继续处理</p><p><code>200-299</code>=&gt;<strong>成功</strong>:200</p><p><code>300-399</code>=&gt;<strong>重定向</strong>:301<code>永久重定向</code>，除非用户手动清除缓存;302<code>临时重定向</code>,不会缓存;304<code>没有修改</code>,所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。</p><p><code>400-499</code>=&gt;<strong>请求错误</strong>:404<code>Not Found(没有找到)</code></p><p><code>500-599</code>=&gt;<strong>服务器错误</strong>:500<code>服务器内部错误，无法完成请求</code></p><h2 id="ajax" tabindex="-1"><a class="header-anchor" href="#ajax" aria-hidden="true">#</a> ajax</h2><h3 id="ajax-简介" tabindex="-1"><a class="header-anchor" href="#ajax-简介" aria-hidden="true">#</a> Ajax 简介</h3><p><code>Ajax</code>即“<code>Asynchronous Javascript And XML</code>”（异步 JavaScript 和 XML），是指一种创建交互式、快速动态网页应用的网页开发技术，无需重新加载整个网页的情况下，能够更新部分网页的技术。</p><p><code>Ajax</code>中的异步：可以异步地向服务器发送请求，在等待响应的过程中，不会阻塞当前页面，浏览器可以做自己的事. 直到成功获取响应后，浏览器才开始处理响应数据。</p><p><code>XML</code> 可扩展标记语言，是前后端数据通信时传输数据的一种格式</p><p><code> XML</code> 现在已经不怎么用了，<strong>现在比较常用的时<code>JSON </code></strong></p><p><code>Ajax</code>其实就是浏览器与服务器之间的一种 异步通信方式</p><p>使用<code>Ajax</code>可以在不重新加载整个页面的情况下， <strong>对页面的某部分进行更新</strong></p><h3 id="ajax-的基本用法" tabindex="-1"><a class="header-anchor" href="#ajax-的基本用法" aria-hidden="true">#</a> Ajax 的基本用法</h3><p><code>Ajax</code>想要实现浏览器与服务器之间的异步通信，需要依靠<code>XMLHttpRequest</code>,它是一个<strong>构造函数</strong></p><ol><li>创建 xhr 对象</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>监听事件,处理响应</li></ol><p>当获取到响应后，会触发 xhr 对象的<code>readystatechange</code>事件，可以在该事件中对响应进行处理</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token comment">//HTTP CODE</span>
  <span class="token comment">//获取响应后，响应的内容会自动填充xhr对象的属性</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;正常使用&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">//数据</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>readystatechange</code>事件监听<code>readyState</code>这个状态的变化 一共有 5 个状态</p><ul><li>0：未初始化，尚未调用<code>open()</code></li><li>1：启动，已经调用<code>open()</code>,但尚未调用<code>send()</code></li><li>2：发送，已经调用<code>send()</code>,当尚未接收到响应</li><li>3：接收，已经接收到部分响应数据</li><li>4：完成，已经接收到全部响应数据，并且可以在浏览器中使用</li></ul><ol start="3"><li>准备发送请求<br> 调用<code>open()</code>并不会真正发送请求，而只是做好发送请求前的准备工作</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr
  <span class="token punctuation">.</span>open
  <span class="token comment">//&#39;http方法&#39;,</span>
  <span class="token comment">//&quot;地址url&quot;,true或false:是否为异步请求，一般肯定true</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>发送请求</li></ol><p>调用<code>send()</code>正式发送请求</p><p><code>send()</code>的参数是通过请求体携带的数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">//GET请求一般填null，因为GET不能通过请求体携带数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>eg:使用<code>Ajax</code>来完成前后端通信</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&#39;https://www.imooc.com/api/http/search/suggest?words=js&#39;</span>
<span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="get-请求" tabindex="-1"><a class="header-anchor" href="#get-请求" aria-hidden="true">#</a> GET 请求</h3><ol><li>携带数据<br><code>GET</code>请求不能通过请求体携带数据，但可以通过请求头携带， 在 url 对应的接口下添加名值对</li><li>数据编码<br> 如果携带的数据时非英文字母的话，比如说汉字，<strong>就需要编码之后再发送给后端</strong>，不然会造成乱码问题</li></ol><h3 id="post-请求" tabindex="-1"><a class="header-anchor" href="#post-请求" aria-hidden="true">#</a> POST 请求</h3><ol><li>携带数据<br><code>POST</code>请求主要通过请求体携带数据，同时也可以通过请求头携带</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&#39;https://www.imooc.com/api/http/search/suggest?words=js&#39;</span>
<span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>
<span class="token comment">//如果想发送数据，直接写在 send()的参数位置，一般是字符串</span>
<span class="token comment">// 不能直接传递对象，需要先将对象转换成字符串的形式</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;username=alex&amp;age=18&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>数据编码:如果携带的数据时非英文字母的话，比如说汉字，<strong>就需要编码之后再发送给后端</strong>，不然会造成乱码问题</li></ol><h2 id="json" tabindex="-1"><a class="header-anchor" href="#json" aria-hidden="true">#</a> JSON</h2><h3 id="初识-json" tabindex="-1"><a class="header-anchor" href="#初识-json" aria-hidden="true">#</a> 初识 JSON</h3><ol><li><p><code>javascript object notation</code>,<code>Ajax</code>发送和接受的一种数据格式</p></li><li><p>为什么需要 JSON</p></li></ol><p>JSON 有 3 种形式，每种形式的写法都和<code>JS</code>中的数据类型很像，可以很轻松的和<code>JS</code>中的数据类型互相转换</p><h3 id="json-的三种形式" tabindex="-1"><a class="header-anchor" href="#json-的三种形式" aria-hidden="true">#</a> JSON 的三种形式</h3><ol><li>简单值形式</li></ol><p>文件名：<code>xxx.json</code><br> JSON 的简单值形式就对应着 JS 中的基础数据类型,数字，字符串，布尔值，null</p><ol start="2"><li>对象形式</li></ol><p><code>JSON</code>的对象形式就对应着<code>JS</code>中的对象</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token property">&quot;hobby&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;足球&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;乒乓球&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>数组形式</li></ol><p><code>JSON</code>的数组形式就对应着 JS 中的数组</p><div class="hint-container warning"><p class="hint-container-title">注意事项</p><ol><li>JSON 中没有<code>underfined</code>值</li><li>JSON 中的字符串必须使用双引号</li><li>JSON 中是不能注释的</li><li>JSON 中对象的属性名必须使用双引号，属性值如果是字符串也必须用双引号。</li></ol></div><h3 id="json-的常用方法" tabindex="-1"><a class="header-anchor" href="#json-的常用方法" aria-hidden="true">#</a> JSON 的常用方法</h3><ol><li><code>JSON.parse()</code><br> 可以将<code>JSON</code>格式的字符串解析成 JS 中的对应值<br> 一定要是合法的<code>JSON</code>字符串，否则会报错</li><li><code>JSON.stringify()</code> 可以将<code>JS</code>的<strong>基本数据类型，对象或者数组</strong>转换成<code>JSON</code>格式的字符串</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>
  <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">hobby</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;足球&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;乒乓球&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>使用 JSON.parse()和 JSON.stringify()封装 localStorage</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> storage <span class="token operator">=</span> window<span class="token punctuation">.</span>localStorage
<span class="token comment">// 设置</span>
<span class="token keyword">const</span> <span class="token function-variable function">set</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  storage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 获取</span>
<span class="token keyword">const</span> <span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>storage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 删除</span>
<span class="token keyword">const</span> <span class="token function-variable function">remove</span> <span class="token operator">=</span> <span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  storage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 清空</span>
<span class="token keyword">const</span> <span class="token function-variable function">clear</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  storage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="跨域" tabindex="-1"><a class="header-anchor" href="#跨域" aria-hidden="true">#</a> 跨域</h2><h3 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h3><p>向一个域发送请求，如果要请求的域和当前域是不同域，就叫<code>跨域</code></p><p>不同域之间的请求，就是跨域请求</p><h3 id="什么是不同域-什么是同域" tabindex="-1"><a class="header-anchor" href="#什么是不同域-什么是同域" aria-hidden="true">#</a> 什么是不同域，什么是同域</h3><p><code>https(协议)：// www.imooc.com (域名) ：443 (端口号) /course/list (路径)</code></p><ul><li><strong>协议 域名 端口号 任何一个不一样 就是不同域</strong></li><li>与路径无关，路径不一样无所谓</li></ul><h3 id="跨域请求为什么会被阻止" tabindex="-1"><a class="header-anchor" href="#跨域请求为什么会被阻止" aria-hidden="true">#</a> 跨域请求为什么会被阻止</h3><ul><li>阻止跨域请求，其实是浏览器本身的一种安全策略---<code>同源策略</code></li><li>其他客户端或者服务器不存在跨域被阻止的问题</li></ul><h3 id="跨域解决方案" tabindex="-1"><a class="header-anchor" href="#跨域解决方案" aria-hidden="true">#</a> 跨域解决方案</h3><ul><li><code>CORS</code> 跨域资源共享</li><li><code>JSONP </code></li><li>优先使用<code>CORS</code> ，如果浏览器不支持，使用<code>JSONP </code></li></ul><h4 id="cors-跨域资源共享" tabindex="-1"><a class="header-anchor" href="#cors-跨域资源共享" aria-hidden="true">#</a> CORS 跨域资源共享</h4>`,67),k={href:"http://www.ruanyifeng.com/blog/2016/04/cors.html",target:"_blank",rel:"noopener noreferrer"},v=e(`<p>使用 CORS 跨域的过程</p><p>① 浏览器发送请求</p><p>② 后端在响应头中添加 <code>Access-Control-Allow-Origin </code>头信息</p><p>③ 浏览器接收到响应</p><p>④ 如果是同域下的请求，浏览器不会额外做什么，这次前后端通信就圆满完成了</p><p>⑤ 如果是跨域请求，浏览器会从响应头中查找是否允许跨域访问</p><p>⑥ 如果允许跨域，通信圆满完成</p><p>⑦ 如果没找到或不包含想要跨域的域名，就丢弃响应结果</p><p><code>CORS</code>兼容性：IE10 及以上可以正常使用</p><h3 id="jsonp" tabindex="-1"><a class="header-anchor" href="#jsonp" aria-hidden="true">#</a> JSONP</h3><ol><li>原理<br><code>script</code> 标签跨域不会被浏览器阻止<br><code>JSONP</code>主要就是利用<code>SCRIPT</code>标签，加载跨域文件</li><li>使用<code>JSONP </code>实现跨域<br> 服务器端准备好<code>JSONP</code>接口<br> 手动加载<code>JSONP</code>标签或</li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">const</span> <span class="token function-variable function">handleResponse</span> <span class="token operator">=</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://www.imooc.com/api/http/jsonp?callback=handleResponse<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>动态加载<code>JSONP</code>接口</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 动态加载JSONP接口</span>
<span class="token keyword">const</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span>
script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;https://www.imooc.com/api/http/jsonp?callback=handleResponse&#39;</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">handleResponse</span> <span class="token operator">=</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="xhr-对象" tabindex="-1"><a class="header-anchor" href="#xhr-对象" aria-hidden="true">#</a> XHR 对象</h2><h3 id="xhr-的属性" tabindex="-1"><a class="header-anchor" href="#xhr-的属性" aria-hidden="true">#</a> XHR 的属性</h3><ol><li><code>responseType</code> 和<code>response</code>属性</li></ol><ul><li><code>responseText</code>只能在没有设置<code>responseType</code>或者<code>responseType=&#39;&#39;</code>或<code>responseType=&#39;text&#39;</code> 的时候才能使用</li><li><code>response</code>可以替代<code>responseText</code>，默认返回字符串，可以通过<code>responseType</code>设置返回形式(如果设置为<code>JSON</code>，浏览器默认调用<code>JSON.parse()</code>解析成 JS 中的对应值，但服务器还是返回的是<code>JSON</code>格式的字符串)</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">&#39;json&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li><p><code>timeout</code>属性:设置请求的超时时间（单位：ms）</p></li><li><p><code>withCredentitals</code> 属性</p></li></ol><ul><li>指定使用<code>Ajax</code>发送请求时是否携带<code>Cookie </code></li><li>使用<code>Ajax</code>发送请求，默认情况下，<strong>同域时，会携带<code>Cookie</code>,跨域时，不会</strong></li><li><strong>最终是否能成功跨域携带<code>Cookie</code>，还要看服务器同不同意</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="xhr-方法" tabindex="-1"><a class="header-anchor" href="#xhr-方法" aria-hidden="true">#</a> XHR 方法</h3><ol><li><code>abort()</code>:终止当前请求,一般配合 abort 事件一起使用</li><li><code>setRequestHeader()</code>:可以设置请求头信息</li></ol>`,24),m={href:"https://www.runoob.com/http/http-content-type.html",target:"_blank",rel:"noopener noreferrer"},h=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//  请求头中的\`Content-Type\`字段用来告诉服务器，浏览器发送的数据是什么格式的。</span>
xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;application/x-www-form-urlencoded&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 对应的数据格式：&#39;username=ased&amp;password=asd&#39;</span>

xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">)</span> <span class="token comment">// JSON格式的数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="xhr-的事件" tabindex="-1"><a class="header-anchor" href="#xhr-的事件" aria-hidden="true">#</a> XHR 的事件</h3><ol><li><code>load</code> 事件:响应数据可用时触发 <strong>推荐使用<code>onload</code>代替<code>onreadystatechange</code></strong></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&#39;https://www.imooc.com/api/http/search/suggest?words=js&#39;</span>
<span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token boolean">false</span>
<span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">&#39;json&#39;</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>error 事件<br> 请求发生错误时触发</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&#39;https://www.imooc1.com/api/http/search/suggest?words=js&#39;</span>
<span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token boolean">false</span>
<span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;访问出错拉！&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">&#39;json&#39;</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>abort 事件<br> 调用 abort()终止请求时触发</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&#39;https://www.imooc.com/api/http/search/suggest?words=js&#39;</span>
<span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">&#39;abort&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;543629463&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token boolean">false</span>
<span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;访问出错拉！&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">&#39;json&#39;</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>timeout 事件</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">&#39;json&#39;</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;https://www.imooc.com/api/http/search/suggest?words=js&#39;</span><span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">10</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">ontimeout</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Timeout!!&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="formdata" tabindex="-1"><a class="header-anchor" href="#formdata" aria-hidden="true">#</a> FormData</h2><p>使用 Ajax 提交表单(避免直接提交表单跳转)</p><p>FormData 可用于发送表单数据</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>login<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>用户名<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>密码<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>提交<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> login <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;login&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;submit&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&#39;https://www.imooc.com/api/http/search/suggest?words=js&#39;</span>
    btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
      <span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span>
      <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 阻止表单跳转</span>
        e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        xhr<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
          <span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span>
          <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token boolean">false</span>
        <span class="token punctuation">)</span>
        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
        xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">&#39;json&#39;</span>
        <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>login<span class="token punctuation">)</span>
        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token boolean">false</span>
    <span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>FormData 的基本用法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 通过 HTML 表单元素创建 FormData 对象</span>
<span class="token keyword">const</span> fd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>表单元素<span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span>

<span class="token comment">// 通过 自身的append() 方法添加数据</span>
<span class="token keyword">const</span> fd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>表单元素<span class="token punctuation">)</span>
fd<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
fd<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;sex&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;male&#39;</span><span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="封装-ajax" tabindex="-1"><a class="header-anchor" href="#封装-ajax" aria-hidden="true">#</a> 封装 Ajax</h2><p>1、<code>ajax</code>的原理需要掌握一下。即<code>ajax</code>这门技术是使用<code>XMLHttpRequest</code>这个对象实现的，该对象有一些方法和属性，比如<code>open()</code>、<code>send()</code>、<code>responseType</code>......它们的含义是什么要知道。 2、<code>ajax</code>的具体实现不需要自己手动封装。 3、实际开发中会使用现成的插件，我们只需要按照插件的文档使用即可</p><p>源代码：</p>`,19),g={href:"https://github.com/zhangfanhang/hand-tear-code/tree/master/ajax_%E5%B0%81%E8%A3%85",target:"_blank",rel:"noopener noreferrer"},b=n("h2",{id:"axios",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#axios","aria-hidden":"true"},"#"),s(" axios")],-1),x=n("li",null,"基于 Promise 的 HTTP 库",-1),f={href:"https://www.axios-http.cn/",target:"_blank",rel:"noopener noreferrer"},w=n("h2",{id:"fetch",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#fetch","aria-hidden":"true"},"#"),s(" Fetch")],-1),y={href:"https://www.ruanyifeng.com/blog/2020/12/fetch-tutorial.html",target:"_blank",rel:"noopener noreferrer"},T=n("ol",null,[n("li",null,"也是前后端通信的一种方式"),n("li",null,[s("是"),n("code",null,"Ajax"),s("的一种替代方案，它是基于"),n("code",null,"Promise"),s("的")]),n("li",null,[n("strong",null,[n("code",null,"Ajax"),s("的兼容性比 "),n("code",null,"Fetch"),s(" 好")])])],-1);function j(q,S){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[n("a",r,[s("HTTP 状态码"),t(a)])]),d,n("p",null,[n("a",k,[s("跨域资源共享 CORS 详解"),t(a)])]),v,n("p",null,[n("a",m,[s("HTTP content-type"),t(a)])]),h,n("p",null,[n("a",g,[s("hand-tear-code"),t(a)])]),b,n("ol",null,[x,n("li",null,[n("a",f,[s("axios 官方文档"),t(a)])])]),w,n("p",null,[n("a",y,[s("Fetch API 教程"),t(a)])]),T])}const P=p(i,[["render",j],["__file","前后端数据交互.html.vue"]]);export{P as default};
