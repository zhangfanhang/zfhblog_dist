import{ac as r,H as k,I as d,G as n,U as s,O as a,ae as e,ad as o,X as t}from"./framework-fadc5609.js";const b={},m=o(`<h2 id="typeof-能判断哪些类型" tabindex="-1"><a class="header-anchor" href="#typeof-能判断哪些类型" aria-hidden="true">#</a> typeof 能判断哪些类型？</h2><ul><li><code>string</code>、<code>number</code>、<code>undefined</code>、<code>boolean</code></li><li>识别函数=&gt;<code>function</code></li><li>判断是否是引用类型(不可再细分)=&gt;<code>object</code></li><li>特殊的对于 <code>null</code>,<code>null</code> 不是一个对象，尽管 <code>typeof null</code> 输出的是 <code>object</code>，这是一个历史遗留问题，<code>JS </code>的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，<code>000</code> 开头代表是对象，<code>null</code> 表示为全零，所以将它错误的判断为 <code>object</code></li></ul><h2 id="何时使用-何时使用" tabindex="-1"><a class="header-anchor" href="#何时使用-何时使用" aria-hidden="true">#</a> 何时使用 === 何时使用 ==</h2><p><strong>除了 == null 之外 其它地方一律用===</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>b <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 相当于 if(obj.b===null||obj.b===undefined)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串拼接的几种情况" tabindex="-1"><a class="header-anchor" href="#字符串拼接的几种情况" aria-hidden="true">#</a> 字符串拼接的几种情况</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">10</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token string">&#39;10&#39;</span> <span class="token comment">// 只要有一个不是数字，就是字符串拼接</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">+</span> <span class="token number">10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token comment">// 110 10010 11</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="if-语句和逻辑运算" tabindex="-1"><a class="header-anchor" href="#if-语句和逻辑运算" aria-hidden="true">#</a> if 语句和逻辑运算</h2><p><code>truly</code> 变量:<code>!!a===true </code>的变量</p><p><code>falsy</code> 变量:<code>!!a===false</code> 的变量</p><p>以下是 <code>falsy</code> 变量。除此之外都是 <code>truly</code> 变量</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">!</span><span class="token operator">!</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token boolean">false</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token boolean">false</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token string">&#39;&#39;</span> <span class="token operator">==</span> <span class="token boolean">false</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token boolean">false</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token boolean">false</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>if</code> 语句:判断该变量是 <code>truly</code> 变量还是 <code>falsy</code> 变量</p><p>逻辑判断:短路计算</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">10</span> <span class="token operator">&amp;&amp;</span> <span class="token number">9</span> <span class="token comment">// 10</span>
<span class="token string">&#39;&#39;</span> <span class="token operator">||</span> <span class="token string">&#39;abc&#39;</span> <span class="token comment">//&#39;abc&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="原始值和引用值的区别" tabindex="-1"><a class="header-anchor" href="#原始值和引用值的区别" aria-hidden="true">#</a> 原始值和引用值的区别</h2><h3 id="内存的分配不同" tabindex="-1"><a class="header-anchor" href="#内存的分配不同" aria-hidden="true">#</a> 内存的分配不同</h3><ul><li>原始值存储在栈中</li><li>引用值存储在堆中，栈中存储的变量，是指向堆中的引用地址</li></ul><h3 id="访问机制不同" tabindex="-1"><a class="header-anchor" href="#访问机制不同" aria-hidden="true">#</a> 访问机制不同</h3><ul><li>原始值是按值访问</li><li>引用值按引用访问，JavaScript 不允许直接访问保存在堆内存中的对象，在访问一个对象时，首先得到的是这个对象在堆内存中的地址，然后再按照这个地址去获得这个对象的值</li></ul><h3 id="复制变量时不同" tabindex="-1"><a class="header-anchor" href="#复制变量时不同" aria-hidden="true">#</a> 复制变量时不同</h3><ul><li>原始值：a=b;是将 b 中保存的原始值的副本赋值给新变量 a,a 和 b 完全独立，互不影响</li><li>引用值：a=b;将 b 保存的对象内存的引用地址赋值给了新变量 a;a 和 b 指向了同一个堆内存地址，其中一个值发生了改变，另一个也会改变</li></ul><h3 id="比较变量时不同" tabindex="-1"><a class="header-anchor" href="#比较变量时不同" aria-hidden="true">#</a> 比较变量时不同</h3><ul><li><p>原始值：==比较值是否相等(<strong>先进行类型转换再确定操作数是否相等</strong>---<strong><em>引自 js 高级程序设计（第四版） P71</em></strong>)，===不仅比较值是否相等，还会比较数据类型是否相同</p></li><li><p>引用数据类型：不管是 == 还是 === ，都是比较内存地址是否相同，即比较是否都指向同一个对象</p></li></ul><h3 id="参数传递的不同" tabindex="-1"><a class="header-anchor" href="#参数传递的不同" aria-hidden="true">#</a> 参数传递的不同</h3><p>函数传参都是按值传递(栈中的存储的内容)：原始值，拷贝的是值；引用值，拷贝的是引用地址</p><h2 id="手写深拷贝" tabindex="-1"><a class="header-anchor" href="#手写深拷贝" aria-hidden="true">#</a> 手写深拷贝</h2>`,27),v=n("code",null,"lodash",-1),h={href:"http://www.grapevinelin.cn/2021/11/29/shen-ru-qian-chu-loadash-shen-kao-bei-yuan-ma/",target:"_blank",rel:"noopener noreferrer"},y=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"deepClone"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("obj "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"typeof"),s(" obj "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token string"},"'object'"),s(),n("span",{class:"token operator"},"||"),s(" obj "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(` obj
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},"//    初始化返回结果"),s(`
  `),n("span",{class:"token keyword"},"let"),s(` result
  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("obj "),n("span",{class:"token keyword"},"instanceof"),s(),n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 判断为数组"),s(`
    result `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
    result `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" key "),n("span",{class:"token keyword"},"in"),s(" obj"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hasOwnProperty"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token comment"},"// 保证key不是原型的属性 for...in的问题"),s(`
      result`),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"deepClone"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},"// 返回结果"),s(`
  `),n("span",{class:"token keyword"},"return"),s(` result
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"deepCopy"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"target"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"let"),s(" copyed_objs "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token comment"},"//此数组解决了循环引用和相同引用的问题，它存放已经递归到的目标对象"),s(`
  `),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"_deepCopy"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"target"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"typeof"),s(" target "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token string"},"'object'"),s(),n("span",{class:"token operator"},"||"),s(),n("span",{class:"token operator"},"!"),s("target"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token keyword"},"return"),s(` target
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" copyed_objs"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("copyed_objs"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),s("target "),n("span",{class:"token operator"},"==="),s(" target"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" copyed_objs"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),s(`copyTarget
      `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" obj "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("Array"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isArray"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      obj `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token comment"},"//处理target是数组的情况"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    copyed_objs`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token literal-property property"},"target"),n("span",{class:"token operator"},":"),s(" target"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token literal-property property"},"copyTarget"),n("span",{class:"token operator"},":"),s(" obj "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
    Object`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"keys"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"forEach"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
      obj`),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"_deepCopy"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"return"),s(` obj
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"_deepCopy"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=o(`<h2 id="json-sringify-和-json-parse-方法拷贝的缺陷" tabindex="-1"><a class="header-anchor" href="#json-sringify-和-json-parse-方法拷贝的缺陷" aria-hidden="true">#</a> JSON.sringify 和 JSON.parse 方法拷贝的缺陷?</h2><p>这是 <code>JS</code> 实现深拷贝最简单的方法了，原理就是先将对象转换为字符串，再通过 <code>JSON.parse</code> 重新建立一个对象。 但是这种方法的局限也很多：</p><ul><li>不能复制 <code>function</code>、正则、<code>Symbol</code></li><li>循环引用(当对象 1 中的某个属性指向对象 2，对象 2 中的某个属性指向对象 1 就会出现循环引用)报错</li><li>相同的引用会被重复复制</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">asd</span><span class="token operator">:</span> <span class="token string">&#39;asd&#39;</span> <span class="token punctuation">}</span>
<span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;aaaaa&#39;</span> <span class="token punctuation">}</span>
obj<span class="token punctuation">.</span>ttt1 <span class="token operator">=</span> obj2
obj<span class="token punctuation">.</span>ttt2 <span class="token operator">=</span> obj2
<span class="token keyword">let</span> cp <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>
obj<span class="token punctuation">.</span>ttt1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;change&#39;</span>
cp<span class="token punctuation">.</span>ttt1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;change&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> cp<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 👆 的代码，原对象改变 <code>ttt1.name</code> 也会改变 <code>ttt2.name</code> ，因为他们指向相同的对象。但是，复制的对象中，<code>ttt1</code> 和 <code>ttt2</code> 分别指向了两个对象。复制对象没有保持和原对象一样的结构。因此，<code>JSON</code> 实现深复制不能处理指向相同引用的情况，相同的引用会被重复复制</p>`,5);function j(w,_){const c=t("ExternalLinkIcon"),p=t("CodeTabs");return k(),d("div",null,[m,n("blockquote",null,[n("p",null,[s("仅仅是解决了深复制的关键问题，还需要针对不同的数据类型进行完善,"),v,s("的深拷贝针对不同的数据类型进行了处理，见"),n("a",h,[s("深入浅出 loadash 深拷贝源码"),a(c)])])]),a(p,{id:"133",data:[{title:"还不错"},{title:"做的很棒"}]},{tab0:e(({title:l,value:i,isActive:u})=>[y]),tab1:e(({title:l,value:i,isActive:u})=>[f]),_:1}),g])}const N=r(b,[["render",j],["__file","zhuji.html.vue"]]);export{N as default};
