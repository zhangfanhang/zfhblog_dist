const t=JSON.parse(`{"key":"v-e50f465a","path":"/%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/JS/%E9%87%8D%E6%96%B0%E7%90%86%E8%A7%A3%E9%97%AD%E5%8C%85.html","title":"重新理解闭包","lang":"zh-CN","frontmatter":{"title":"重新理解闭包","tag":["闭包"],"category":["开发日志","JS"],"description":"闭包确实很难理解，之前我是这样理解的： 闭包指的是那些引用了另一个函数作用域中变量的函数，通常是在嵌套函数中实现的。 再后来看到这样一段话： 在函数中被使用，但它既不是函数参数、也不是函数的局部变量，而是一个不属于当前作用域的变量，此时它相对于当前作用域来说，就是一个自由变量。而引用了自由变量的函数，就叫闭包。 比如说： 没错，这样就形成了一个闭包。a...","head":[["meta",{"property":"og:url","content":"https://zfhblog.top/%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/JS/%E9%87%8D%E6%96%B0%E7%90%86%E8%A7%A3%E9%97%AD%E5%8C%85"}],["meta",{"property":"og:site_name","content":"ZFH's Blog"}],["meta",{"property":"og:title","content":"重新理解闭包"}],["meta",{"property":"og:description","content":"闭包确实很难理解，之前我是这样理解的： 闭包指的是那些引用了另一个函数作用域中变量的函数，通常是在嵌套函数中实现的。 再后来看到这样一段话： 在函数中被使用，但它既不是函数参数、也不是函数的局部变量，而是一个不属于当前作用域的变量，此时它相对于当前作用域来说，就是一个自由变量。而引用了自由变量的函数，就叫闭包。 比如说： 没错，这样就形成了一个闭包。a..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-07T02:29:19.000Z"}],["meta",{"property":"article:tag","content":"闭包"}],["meta",{"property":"article:modified_time","content":"2023-01-07T02:29:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"重新理解闭包\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-01-07T02:29:19.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1670983849000,"updatedTime":1673058559000,"contributors":[{"name":"zhangfanhang","email":"543629463@qq.com","commits":2}]},"readingTime":{"minutes":1.18,"words":355},"filePathRelative":"开发日志/JS/重新理解闭包.md","localizedDate":"2022年12月14日","copyright":{},"autoDesc":true}`);export{t as data};
