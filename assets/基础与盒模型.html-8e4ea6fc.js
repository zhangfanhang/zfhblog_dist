import{ac as p,H as d,I as r,G as n,U as a,O as s,ad as e,X as o}from"./framework-fadc5609.js";const u={},h=e(`<h2 id="css3-简介" tabindex="-1"><a class="header-anchor" href="#css3-简介" aria-hidden="true">#</a> css3 简介</h2><ul><li><p><code>CSS</code>(<code>cascading style sheet</code>，层叠样式表)是用来给<code> HTML</code> 标签添加样式的语言</p></li><li><p><code>CSS3 </code>是 <code>CSS</code> 的最新版本，增加了大量的样式、动画、<code>3D</code> 特效和移动端特性等</p></li></ul><h2 id="css3-书写位置" tabindex="-1"><a class="header-anchor" href="#css3-书写位置" aria-hidden="true">#</a> css3 书写位置</h2><h3 id="内嵌式" tabindex="-1"><a class="header-anchor" href="#内嵌式" aria-hidden="true">#</a> 内嵌式</h3><p>在 <code>head</code> 标签对中，添加 <code>style </code>标签对，然后在里面书写 <code>css</code> 样式</p><h3 id="外链式" tabindex="-1"><a class="header-anchor" href="#外链式" aria-hidden="true">#</a> 外链式</h3><p>单独创建<code> css</code> 文件，在<code>head</code>标签中，通过 <code>link </code>引入</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>index.css<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="导入式" tabindex="-1"><a class="header-anchor" href="#导入式" aria-hidden="true">#</a> 导入式</h3><ul><li>导入式是最不常见的样式表导入方法</li><li>使用导入式引入的样式表，不会等待 <code>CSS </code>文件加载完毕，而是会立即渲染 <code>HTML</code> 结构</li><li>必须写在 <code>style</code> 标签的<strong>最开始</strong></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>style.css<span class="token punctuation">)</span></span><span class="token punctuation">;</span></span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="行内式" tabindex="-1"><a class="header-anchor" href="#行内式" aria-hidden="true">#</a> 行内式</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span>red</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="css-选择器与伪类" tabindex="-1"><a class="header-anchor" href="#css-选择器与伪类" aria-hidden="true">#</a> CSS 选择器与伪类</h2><h3 id="标签选择器" tabindex="-1"><a class="header-anchor" href="#标签选择器" aria-hidden="true">#</a> 标签选择器</h3><ul><li><p>标签选择器也称元素选择器、类型选择器，它直接使用元素的标签名当做选择器，将选择页面上所有该种标签</p></li><li><p>标签选择器将选择页面上所有该种标签，无论这个标签所处位置的深浅</p></li><li><p>标签选择器“覆盖面”非常大，所以通常用于标签的初始化</p></li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">ul</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 去掉无序列表的小圆点 */</span>
  <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">a</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 去掉超级链接的下划线 */</span>
  <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="id-选择器" tabindex="-1"><a class="header-anchor" href="#id-选择器" aria-hidden="true">#</a> ID 选择器</h3><ul><li><p>标签可以有 <code>id</code> 属性，是这个标签的唯一标识</p></li><li><p><code>id </code>的名称<strong>只能由字母、数字、下划线、短横构成，且不能以数字开头，字母区分大小写</strong>，但习惯上<strong>一般为小写字母</strong></p></li><li><p><strong>同一个页面上不能有相同 <code>id</code> 的标签</strong></p></li><li><p><code>CSS</code> 选择器可以使用井号<code>#</code>前缀，选择指定<code> id</code> 的标签</p></li></ul><h3 id="class-选择器" tabindex="-1"><a class="header-anchor" href="#class-选择器" aria-hidden="true">#</a> class 选择器</h3><ul><li><p><code> class</code> 属性表示“类名”</p></li><li><p>类名的命名规范和 id 的命名规范相同</p></li><li><p>使用点<code>.</code>前缀选择指定 <code>class</code> 的标签</p></li><li><p>多个标签可以为相同类名</p></li><li><p>同一个标签可以同时属于多个类，类名用空格隔开</p></li></ul><h3 id="原子类" tabindex="-1"><a class="header-anchor" href="#原子类" aria-hidden="true">#</a> 原子类</h3><p>在做网页项目前，可以将所有的常用字号、文字颜色、行高外边距、内边距等都设置为单独的类</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.color-red</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>HTML </code>标签就可以“按需选择”它的类名了，这样可以非常快速的添加一些常见样式</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>color-red<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="复合选择器" tabindex="-1"><a class="header-anchor" href="#复合选择器" aria-hidden="true">#</a> 复合选择器</h3><table><thead><tr><th style="text-align:center;">选择器名称</th><th style="text-align:center;">示例</th><th style="text-align:center;">示例的意义</th></tr></thead><tbody><tr><td style="text-align:center;">后代选择器</td><td style="text-align:center;">.box .spec</td><td style="text-align:center;">选择类名为 box 的标签内部的类名为 spec 的标签</td></tr><tr><td style="text-align:center;">交集选择器</td><td style="text-align:center;">li.spec</td><td style="text-align:center;">选择既是 li 标签，也属于 spec 类的标签</td></tr><tr><td style="text-align:center;">并集选择器</td><td style="text-align:center;">ul,ol</td><td style="text-align:center;">选择所有 ul 和 ol 标签</td></tr></tbody></table><h3 id="伪类" tabindex="-1"><a class="header-anchor" href="#伪类" aria-hidden="true">#</a> 伪类</h3><div class="hint-container tip"><p class="hint-container-title">:root</p><p><code>:root</code> 这个<code>CSS</code>伪类匹配文档树的根元素。对于 <code>HTML</code>来说，<code>:root</code>表示<code>html</code> 元素，除了优先级更高之外，与<code>html</code>选择器相同。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* :root优先级更高 */</span>
<span class="token selector">:root</span> <span class="token punctuation">{</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">html</span> <span class="token punctuation">{</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>伪类是添加到选择器的描述性词语，<strong>指定要选择的元素的特殊状态</strong>，超级链接拥有 4 个特殊状态:</p><table><thead><tr><th style="text-align:center;">伪类</th><th style="text-align:center;">意义</th></tr></thead><tbody><tr><td style="text-align:center;">a:link</td><td style="text-align:center;">没有被访问的超级链接</td></tr><tr><td style="text-align:center;">A:visited</td><td style="text-align:center;">已经被访问过的超级链接</td></tr><tr><td style="text-align:center;">a:hover</td><td style="text-align:center;">正被鼠标悬停的超级链接</td></tr><tr><td style="text-align:center;">A:active</td><td style="text-align:center;">正被激活的超级链接 🔗（按下按键但是还没有松开按键）</td></tr></tbody></table><p><code>a</code> 标签的伪类书写，要按照“<code>爱恨准则</code>”的顺序，否则会有伪类不生效: <strong>L</strong>O<strong>V</strong>E <strong>HA</strong>TE</p>`,33),g={href:"https://www.w3school.com.cn/css/css_pseudo_classes.asp",target:"_blank",rel:"noopener noreferrer"},k=e(`<h2 id="css3-选择器与伪元素" tabindex="-1"><a class="header-anchor" href="#css3-选择器与伪元素" aria-hidden="true">#</a> CSS3 选择器与伪元素</h2><h3 id="元素关系选择器" tabindex="-1"><a class="header-anchor" href="#元素关系选择器" aria-hidden="true">#</a> 元素关系选择器</h3><table><thead><tr><th style="text-align:center;">名称</th><th style="text-align:center;">举例</th><th style="text-align:center;">意义</th></tr></thead><tbody><tr><td style="text-align:center;">子选择器</td><td style="text-align:center;">div&gt;p</td><td style="text-align:center;">div 的子标签 p</td></tr><tr><td style="text-align:center;">相邻兄弟选择器</td><td style="text-align:center;">img+p</td><td style="text-align:center;">图片后面紧跟着的段落将被选中</td></tr><tr><td style="text-align:center;">通用兄弟选择器</td><td style="text-align:center;">p~span</td><td style="text-align:center;">p 元素之后的所有同层级 span 元素</td></tr></tbody></table><h3 id="序号选择器" tabindex="-1"><a class="header-anchor" href="#序号选择器" aria-hidden="true">#</a> 序号选择器</h3><div class="hint-container warning"><p class="hint-container-title">注意</p><p>这种写法是错误的：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* ❌ */</span>
<span class="token selector">.box1:first-child</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>first-child</code>只是一个<strong>修饰词语</strong>，还需要在前面指定具体是那种标签或元素</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* √ 表示选中.box1下第一个p */</span>
<span class="token selector">.box1 p:first-child</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>:nth-child(even)</code>表示选中所有序号为偶数的子元素，<code>:nth-child(odd)</code>表示选中所有序号为奇数的子元素 除此之外还可以这样写：<code>nth-child(an+b)</code>,表示<strong>从 b 开始每 a 个选一个</strong></p></div><table><thead><tr><th style="text-align:center;">举例</th><th style="text-align:center;">意义</th></tr></thead><tbody><tr><td style="text-align:center;">:first-child</td><td style="text-align:center;">第 1 个子元素</td></tr><tr><td style="text-align:center;">:last-child</td><td style="text-align:center;">最后 1 个子元素</td></tr><tr><td style="text-align:center;">:nth-child(3)</td><td style="text-align:center;">第 3 个子元素</td></tr><tr><td style="text-align:center;">:nth-of-type(3)</td><td style="text-align:center;">第 3 个某类型子元素</td></tr><tr><td style="text-align:center;">:nth-last-child(3)</td><td style="text-align:center;">倒数第 3 个子元素</td></tr><tr><td style="text-align:center;">:nth-last-of-type(3)</td><td style="text-align:center;">倒数第 3 个某类型子元素</td></tr></tbody></table>`,6),m={id:"属性选择器",tabindex:"-1"},v=n("a",{class:"header-anchor",href:"#属性选择器","aria-hidden":"true"},"#",-1),b=e("<table><thead><tr><th>举例</th><th>意义</th></tr></thead><tbody><tr><td>img[alt]</td><td>选择有 alt 属性的 img 标签</td></tr><tr><td>img[alt=&#39;故宫&#39;]</td><td>选择 alt 属性是故宫的 img 标签</td></tr><tr><td>img[alt^=&#39;北京&#39;]</td><td>选择 alt 属性以北京开头的 img 标签</td></tr><tr><td>img[alt$=&#39;夜景&#39;]</td><td>选择 alt 属性以夜景结尾的 img 标签</td></tr><tr><td>img[alt*=&#39;美&#39;]</td><td>选择有 alt 属性中含有美字的 img 标签</td></tr><tr><td>img[alt~=&#39;手机拍摄&#39;]</td><td>选择有 alt 属性中有空格隔开的手机拍摄字样的 img 标签</td></tr><tr><td>img[alt|=&#39;参赛作品&#39;]</td><td>选择有 alt 属性以&quot;参赛作用-”开头的 img 标签</td></tr></tbody></table><p><strong>属性选择器不太常用；可以配合自定义属性使用:见 <code>DOM </code>章节</strong></p>",2),x={id:"伪元素",tabindex:"-1"},f=n("a",{class:"header-anchor",href:"#伪元素","aria-hidden":"true"},"#",-1),y=e(`<div class="hint-container tip"><p class="hint-container-title">伪元素的特性及其区别</p><ol><li>伪类本质上是为了弥补常规 CSS 选择器的不足，以便获取到更多信息；</li><li>伪元素本质上是创建了一个有内容的虚拟容器；</li><li>CSS3 中伪类和伪元素的语法不同；</li><li>可以同时使用多个伪类，而只能同时使用一个伪元素；</li></ol></div><p><code>CSS3</code> 新增了“伪元素”特性，顾名思义，表示虚拟动态创建的元素</p><p>伪元素用双冒号表示</p><p><strong>实际项目中可以结合<code>iconfont</code>完成小图标的添加</strong></p><h4 id="before-after" tabindex="-1"><a class="header-anchor" href="#before-after" aria-hidden="true">#</a> <code>::before</code> <code>::after</code></h4><ul><li><code>::before</code>创建一个伪元素，其将成为匹配选中的元素的第一个子元素，必须设置<code>content</code>属性表示其中的内容</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div::before</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&#39;★&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>::after</code>创建一个伪元素，其将成为匹配选中的元素的最后一个子元素，必须设置<code>content</code>属性表示其中的内容</li></ul><h4 id="selection" tabindex="-1"><a class="header-anchor" href="#selection" aria-hidden="true">#</a> <code>::selection</code></h4><p><code>::selection</code> <code>css</code> 伪元素应用于文档中被用户高亮的部分（使用鼠标圈选的部分）</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">#box1::selection</span> <span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>====&gt;用鼠标选择我看看，我的背景颜色是绿色吗?&lt;====<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="first-letter-first-line" tabindex="-1"><a class="header-anchor" href="#first-letter-first-line" aria-hidden="true">#</a> <code>::first-letter</code> <code>::first-line</code></h4><ul><li><code>::first-letter </code>会选中某元素中（必须是块级元素）第一行的第一个字母</li><li><code>::first-line </code>会选中某元素中（必须是块级元素）第一行全部文字</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">#box2::first-letter</span> <span class="token punctuation">{</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>没错，这是一句话<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="层叠性和优先级" tabindex="-1"><a class="header-anchor" href="#层叠性和优先级" aria-hidden="true">#</a> 层叠性和优先级</h2><h3 id="层叠性" tabindex="-1"><a class="header-anchor" href="#层叠性" aria-hidden="true">#</a> 层叠性</h3><p><strong>CSS 处理冲突的一种能力，称之为层叠性</strong></p><p>在多个选择器选择同一个标签，然后又设置了相同的属性，才会发生层叠</p><p>当发生层叠时，哪个选择器设置的属性起作用，<strong>是由优先级来确定</strong></p><h3 id="优先级" tabindex="-1"><a class="header-anchor" href="#优先级" aria-hidden="true">#</a> 优先级</h3><p>浏览器通过<strong>优先级</strong>来判断哪些属性值与一个元素最为相关，从而在该元素上应用这些属性值</p><p><strong>优先级就是分配给指定的 CSS 声明的一个权重</strong>，它由 匹配的选择器中的 每一种选择器类型的 数值 决定</p><p>而<strong>当优先级与多个 CSS 声明中任意一个声明的优先级相等的时候，在 CSS 中靠后的那个声明将会被应用到元素上</strong></p><h3 id="css-权重的理解" tabindex="-1"><a class="header-anchor" href="#css-权重的理解" aria-hidden="true">#</a> CSS 权重的理解</h3><p>每一个 css 的选择器都有一个相对的重要程度值，也就是权重的值，简称“权值”</p><p>css 通过 css 选择器的权重占比，来计算 css 选择规则的总权值，从而确定 CSS 声明的<strong>优先级次序</strong></p><ul><li>css 选择规则的权值不同时，权值高的优先(继承的情况除外)</li><li>css 选择规则的权值相同时，后定义的规则优先(继承的情况除外)</li><li>css 属性后面加 !important 时，无条件绝对优先</li></ul><h4 id="权值的计算" tabindex="-1"><a class="header-anchor" href="#权值的计算" aria-hidden="true">#</a> <strong>权值的计算</strong></h4><p>权值等级划分， 一般来说是划分 4 个等级：</p><ul><li><p>第一等级：代表 内联样式，如 style=&quot;&quot;，权值为 1,0,0,0；</p></li><li><p>第二等级：代表 ID 选择器，如 #id=&quot;&quot;, 权值为 0,1,0,0；</p></li><li><p>第三等级：代表 calss | 伪类 | 属性选择器，如 .class | :hover,:link,:target | [type], 权值 0,0,1,0；</p></li><li><p>第四等级：代表 标签 | 伪元素 选择器，如 p | ::after, ::before, ::fist-inline, ::selection, 权值 0,0,0,1；</p></li></ul><p>此外，通用选择器（*），元素关系选择器不在 4 等级之内，所以它们的权值都为 0,0,0,0；<strong>继承</strong>的样式没有权值</p>`,31),_=n("strong",null,"特殊的",-1),S={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/:not",target:"_blank",rel:"noopener noreferrer"},q={href:"https://cnblogs.com/starof/p/4387525.html",target:"_blank",rel:"noopener noreferrer"},w=n("strong",null,"eg",-1),C=e(`<p>权值计算 公式：权值 = 第一等级选择器 x 个数，第二等级选择器 x 个数，第三等级选择器 x 个数，第四等级选择器 x 个数</p><p>比较规则：</p><ul><li>1,0,0,0 &gt; 0,99,99,99。也就是说从左往右逐个等级比较，前一等级相等才往后比。</li><li>无论是行间、内部和外部样式，都是按照这个规则来进行比较。而不是直观的行间&gt;内部&gt;外部样式；ID&gt;class&gt;元素。之所以有这样的错觉，是因为确实行间为第一等的权重，所以它的权重是最高的。而内部样式可能一般写在了外部样式引用了之后，所以覆盖掉了之前的。</li><li>在权重相同的情况下，后面的样式会覆盖掉前面的样式。</li><li>通用选择器（*），元素关系选择器，虽然权值为 0,0,0,0，但是<strong>也比继承的样式优先</strong>，0 权值比无权值优先。</li></ul><h2 id="常用文本样式属性" tabindex="-1"><a class="header-anchor" href="#常用文本样式属性" aria-hidden="true">#</a> 常用文本样式属性</h2><h3 id="color" tabindex="-1"><a class="header-anchor" href="#color" aria-hidden="true">#</a> color</h3><p><code>color</code> 属性<strong>可以设置文本内容的前景色</strong></p><p><code>color</code> 属性主要可以用<code>英语单词</code>、<code>十六进制</code>、<code>rgb()</code>、<code>rgba()</code>等表示</p><h3 id="font-size" tabindex="-1"><a class="header-anchor" href="#font-size" aria-hidden="true">#</a> font-size</h3><p><strong><em>网页文字正文字号通常是 16p×，浏览器最小支持 10px 字号</em></strong></p><h3 id="font-wight" tabindex="-1"><a class="header-anchor" href="#font-wight" aria-hidden="true">#</a> font-wight</h3><p>设置字体的粗细程度，通常使用<code>normal</code>（正常粗细与 400 等值）和<code>bold</code>（加粗与 700 等值）</p><h3 id="font-style" tabindex="-1"><a class="header-anchor" href="#font-style" aria-hidden="true">#</a> font-style</h3><p>设置字体的倾斜，常用属性值：<code>italic</code> （设置为倾斜字体）</p><h3 id="text-decoration" tabindex="-1"><a class="header-anchor" href="#text-decoration" aria-hidden="true">#</a> text-decoration</h3><p>设置文本的修饰线外观的（下划线，删除线）</p><ul><li><code>underline</code> 下划线</li><li><code>line-through</code> 删除线</li><li><code>none</code> 没有下划线</li></ul><h2 id="字体属性-font-family" tabindex="-1"><a class="header-anchor" href="#字体属性-font-family" aria-hidden="true">#</a> 字体属性:<code>font-family</code></h2><p>设置字体：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">font-family</span><span class="token punctuation">:</span> serif<span class="token punctuation">,</span> <span class="token string">&#39;Times New Roman&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;微软雅黑&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>字体可以是列表形式，<strong>一般英语字体放到前面，后面的字体是前面的字体的“后备”字体</strong></p></li><li><p>字体名称中有空格，必须用引号包裹</p></li></ul><p>定义字体：</p><p>字体文件根据操作系统和浏览器不同，有<code>eot</code>,<code>woff2</code>,<code>woff</code>,<code>ttf</code>,<code>svg</code>文件格式，需要同时有这五种文件</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>
  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">&#39;YourWebFontName&#39;</span><span class="token punctuation">;</span>
  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&#39;YourWebFontName.eot&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span> <span class="token comment">/* IE9 Compat Modes */</span>
  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&#39;YourWebFontName.eot?#iefix&#39;</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;embedded-opentype&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">/* IE6-IE8 */</span>
      <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&#39;YourWebFontName.woff&#39;</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;woff&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">/* Modern Browsers */</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&#39;YourWebFontName.ttf&#39;</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;truetype&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">/* Safari, Android, iOS */</span>
      <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&#39;YourWebFontName.svg#YourWebFontName&#39;</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;svg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Legacy iOS */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="段落和行相关属性" tabindex="-1"><a class="header-anchor" href="#段落和行相关属性" aria-hidden="true">#</a> 段落和行相关属性</h2><h3 id="text-indent" tabindex="-1"><a class="header-anchor" href="#text-indent" aria-hidden="true">#</a> text-indent</h3><p>定义<strong>文本内容之前的缩进量</strong>，缩进两个字符应该写作:</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* em表示字符宽度 */</span>
<span class="token property">text-indent</span><span class="token punctuation">:</span> 2em<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="line-height" tabindex="-1"><a class="header-anchor" href="#line-height" aria-hidden="true">#</a> line-height</h3><p>行高=第一行的字符顶端到下一行字符的顶端的距离</p><figure><img src="https://zfh-nanjing-bucket.oss-cn-nanjing.aliyuncs.com/blog-images/行高.png" alt="行高" tabindex="0"><figcaption>行高</figcaption></figure><ul><li><p>单位可以是以 px 为单位的数值</p></li><li><p>也可以是没有单位的数值 表示字号的倍数 <strong>这是最推荐的写法</strong></p></li><li><p>也可以是百分数，表示字号的倍数</p></li></ul><h4 id="单行文本垂直居中" tabindex="-1"><a class="header-anchor" href="#单行文本垂直居中" aria-hidden="true">#</a> 单行文本垂直居中</h4><ul><li>设置<strong>行高等于盒子高度</strong>，即可实现<strong>单行文本垂直居中</strong></li></ul><figure><img src="https://zfh-nanjing-bucket.oss-cn-nanjing.aliyuncs.com/blog-images/单行文本垂直居中.png" alt="单行文本垂直居中" tabindex="0"><figcaption>单行文本垂直居中</figcaption></figure><ul><li>设置 <code>text-align:center</code> 即可实现文本<strong>水平居中</strong></li></ul><h2 id="font-合写属性" tabindex="-1"><a class="header-anchor" href="#font-合写属性" aria-hidden="true">#</a> font 合写属性</h2>`,36),z={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/font",target:"_blank",rel:"noopener noreferrer"},N=e(`<h2 id="继承性" tabindex="-1"><a class="header-anchor" href="#继承性" aria-hidden="true">#</a> 继承性</h2><ul><li>继承是一种机制，它允许样式不仅可以应用于某个特定的元素，还可以应用于它的后代</li><li>并不是所有的属性都可以被继承，只有以<code>color/font-/text-/line-开头的属性</code>才可以被继承</li><li>CSS 继承性中的特殊性：<code>a标签</code>的<code>字体颜色和下划线</code>是不能继承的，<code>h标签</code>的<code>字体大小</code>是不能继承的,如果我们想要修改超链接和 h 标签的样式，我们只能通过单独选择出来进行单独的设置</li></ul><p><strong>在继承的情况下，选择器权重计算失效，而是<code>就近原则</code></strong></p><p><code>eg</code>:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token comment">/* 远 */</span>
  <span class="token selector">#box1 #box2</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">/* 近，所以文字是蓝色的 */</span>
  <span class="token selector">.box1 .box3</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>我是文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和上面的代码同样的结构，文字的颜色依然是蓝色:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token comment">/* 继承 */</span>
  <span class="token selector">#box1 #box2 #box3</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">/* 选中 */</span>
  <span class="token selector">p</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="盒模型" tabindex="-1"><a class="header-anchor" href="#盒模型" aria-hidden="true">#</a> 盒模型</h2><h3 id="hight-和-width" tabindex="-1"><a class="header-anchor" href="#hight-和-width" aria-hidden="true">#</a> hight 和 width</h3>`,9),I={class:"hint-container tip"},E=n("p",{class:"hint-container-title"},"相关优质文章",-1),W={href:"https://segmentfault.com/a/1190000012707337",target:"_blank",rel:"noopener noreferrer"},j={href:"https://juejin.cn/post/7002217584296722463",target:"_blank",rel:"noopener noreferrer"},M=e(`<ul><li><p>行内元素的宽度就是它内容的宽度。</p></li><li><p>当块级元素(div,h,li)没有设置 <code>width</code> 属性的时候，默认为父元素的宽度</p></li><li><p>块级元素的<code>height </code>属性如果不设置，他将自动被内容撑开，如果没有内容，则 height 默认为 0</p></li></ul><h3 id="min-和-max" tabindex="-1"><a class="header-anchor" href="#min-和-max" aria-hidden="true">#</a> min 和 max</h3><div class="hint-container warning"><p class="hint-container-title">注意</p><p>当 <code>min-height</code> 大于 <code>max-height</code>或 <code>height</code>时，元素的高度会设置为 <code>min-height</code> 的值</p></div><p>CSS 属性 <strong><code>max-height</code></strong> 设置元素的最大高度。它防止<code>height</code>属性的应用值大于 <code>max-height</code> 的指定值</p><p>CSS 属性 <strong><code>min-height</code></strong> 能够设置元素的最小高度。这样能够防止 <code>height</code> 属性的应用值小于 <code>min-height</code> 的值</p><h3 id="padding" tabindex="-1"><a class="header-anchor" href="#padding" aria-hidden="true">#</a> padding</h3><p>内边距:盒子边框内壁到文字的距离</p><h4 id="写法" tabindex="-1"><a class="header-anchor" href="#写法" aria-hidden="true">#</a> 写法</h4><ol><li>四数值写法：上 右 下 左</li><li>三数值写法：上 左右 下</li><li>二数值写法：上下 左右</li></ol><p><strong>注：margin 写法和 padding 一样</strong></p><h3 id="margin" tabindex="-1"><a class="header-anchor" href="#margin" aria-hidden="true">#</a> margin</h3><p>外边距:盒子与盒子之前的距离</p><h4 id="margin-的塌陷" tabindex="-1"><a class="header-anchor" href="#margin-的塌陷" aria-hidden="true">#</a> margin 的塌陷</h4><div class="hint-container warning"><p class="hint-container-title">注意</p><p>水平方向没有 <code>margin</code> 塌陷</p></div><p>在垂直方向如果有两个元素的外边距有相遇，在浏览器中加载的真正的外边距<strong>不是两个间距的加和</strong>，而是两个边距中<strong>值比较大的</strong>，边距小的塌陷到了边距值大的值内部</p><h5 id="两种情况" tabindex="-1"><a class="header-anchor" href="#两种情况" aria-hidden="true">#</a> 两种情况</h5><ol><li>同级元素塌陷：上面的元素有下边距，下面的元素有上边距，两个边距相遇，取<code>margin</code>取最大值</li><li>父子元素塌陷：父子元素之间也会出现 <code>margin</code> 塌陷：</li></ol><p>（1）父元素和子元素都设置了同方向的 <code>margin-top</code> 值，两个属性之间没有其他内容进行隔离，导致两个属性相遇，发生 <code>margin</code> 塌陷 （2）本身父元素与上一个元素的距离是 0，子元素如果设置了垂直方向的上边距，会带着父级元素一起掉下来（父元素的上边距 0 塌陷到了子元素的上边距 50 里面）</p><h5 id="解决方法" tabindex="-1"><a class="header-anchor" href="#解决方法" aria-hidden="true">#</a> 解决方法</h5><p>（1）同级元素：如果两个元素垂直方向有间距，只需要设置给一个元素，不要进行拆分 （2）父子元素：让两个边距不要相遇，中间可以使用父元素 <code>border</code> 或 <code>padding</code> 将边距分隔开；更加常用的方法，父子盒模型之间的距离就不要用子元素的 <code>margin</code> 去设置，而是用父元素的 <code>padding</code> 挤出来。给父级元素添加<code>overflow:hidden</code>（BFC），也可以解决这个问题</p><h4 id="默认-margin" tabindex="-1"><a class="header-anchor" href="#默认-margin" aria-hidden="true">#</a> 默认 margin</h4><p>一些元素(body,ul,p)有默认的 margin，开始要清除</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">*</span> <span class="token punctuation">{</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="盒子的水平居中" tabindex="-1"><a class="header-anchor" href="#盒子的水平居中" aria-hidden="true">#</a> 盒子的水平居中</h4><div class="hint-container warning"><p class="hint-container-title">margin:0 auto 在不同场景下生效条件</p><p>块级元素：给定要居中的块级元素的宽度。</p><p>行内元素：① 设置 display:block；② 给定要居中的行内元素的宽度。（行内元素设置成块级元素后可以对其宽高进行设置）</p><p>行内块元素：设置 display:block。（如 input、button、img 等元素，自带宽度可以不用设置其宽度）</p></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="盒模型种类和-box-sizing-属性" tabindex="-1"><a class="header-anchor" href="#盒模型种类和-box-sizing-属性" aria-hidden="true">#</a> 盒模型种类和 box-sizing 属性</h3><h4 id="content-box" tabindex="-1"><a class="header-anchor" href="#content-box" aria-hidden="true">#</a> content-box</h4><p><code>W3C</code>标准的盒子模型（标准盒模型）</p><figure><img src="https://zfh-nanjing-bucket.oss-cn-nanjing.aliyuncs.com/blog-images/标准盒子模型.JPG" alt="标准盒子模型" tabindex="0"><figcaption>标准盒子模型</figcaption></figure><h4 id="border-box" tabindex="-1"><a class="header-anchor" href="#border-box" aria-hidden="true">#</a> border-box</h4><p><code>IE</code> 标准的盒子模型（怪异盒模型）</p><figure><img src="https://zfh-nanjing-bucket.oss-cn-nanjing.aliyuncs.com/blog-images/IE盒子模型.JPG" alt="IE盒子模型" tabindex="0"><figcaption>IE盒子模型</figcaption></figure><h4 id="区别" tabindex="-1"><a class="header-anchor" href="#区别" aria-hidden="true">#</a> 区别</h4><ul><li>content-box</li></ul><p><code>width</code> = <code>content(内容的宽度)</code></p><p>标准盒模型下盒子的大小 = <code>content</code> + <code>border</code> + <code>padding</code> + <code>margin</code></p><ul><li>border-box</li></ul><p><code>width</code> = <code>content(内容的宽度)</code> + <code>padding</code>+ <code>border</code></p><p><code>怪异盒模型下盒子的大小</code>=<code>width</code>（包含<code>content</code> + <code>border</code> + <code>padding</code>） + <code>margin</code></p><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h4><ul><li><p>标准盒模型在定义 <code>width</code> 宽度后，后面写 <code>padding</code> 和 <code>border</code> 是会改变盒子实际大小。如果需要保持固定大小，需要进行计算。</p></li><li><p>怪异盒模型在定义 <code>width</code> 宽度后，不管怎么写 <code>padding</code> 和 <code>border</code> 宽度都固定在书写时的 <code>width</code>。但是有可能导致内容被压缩，导致布局异常。</p></li></ul><h4 id="box-sizing-属性" tabindex="-1"><a class="header-anchor" href="#box-sizing-属性" aria-hidden="true">#</a> box-sizing 属性</h4><p>将盒子添加了 <code>box-sizing:border-box</code> 之后，盒子的 <code>width</code>，<code>height</code> 就表示盒子实际占有的宽高，即 <strong><code>padding</code>，<code>border</code> 变为“内缩”，不在“外扩”</strong></p><h3 id="行内元素与块级元素" tabindex="-1"><a class="header-anchor" href="#行内元素与块级元素" aria-hidden="true">#</a> 行内元素与块级元素</h3><h4 id="区别-1" tabindex="-1"><a class="header-anchor" href="#区别-1" aria-hidden="true">#</a> 区别</h4><h5 id="行内元素" tabindex="-1"><a class="header-anchor" href="#行内元素" aria-hidden="true">#</a> 行内元素</h5>`,47),F=n("li",null,"可以和其他元素处于一行，不用必须另起一行。",-1),L=n("code",null,"padding-left",-1),B=n("code",null,"padding-right",-1),D=n("code",null,"margin-left",-1),T=n("code",null,"margin-right",-1),Y={href:"https://blog.csdn.net/weixin_39606638/article/details/117863563",target:"_blank",rel:"noopener noreferrer"},H=n("code",null,"line-height",-1),G=n("li",null,"元素的宽度就是它包含的文字、图片的宽度。",-1),O=n("p",null,[a("常见的行内元素有："),n("code",null,"a"),a("、"),n("code",null,"input"),a("、"),n("code",null,"img"),a("、"),n("code",null,"span")],-1),V={class:"hint-container warning"},A=e('<p class="hint-container-title">注意</p><p>行内元素的 <code>margin-top</code>、<code>margin-bottom</code> 和 <code>padding-top</code>、<code>padding-bottom</code> 属性设置是无效的，但是必须注意的是，对于 <code>padding-top</code> 和 <code>padding-bottom</code> 的设置，从显示效果上来看是增加的，但其实设置是无效的，并不会对周围的元素产生影响</p>',2),P=e(`<h5 id="块级元素" tabindex="-1"><a class="header-anchor" href="#块级元素" aria-hidden="true">#</a> 块级元素</h5><ol><li>每个块级元素都是独自占一行，其后的元素也只能另起一行，并不能两个元素共用一行。</li><li>元素的高度、宽度、行高和顶底边距都是可以设置的。</li><li>元素的宽度如果不设置的话，默认为父元素的宽度。</li></ol><p>常见的块级元素有 <code>div</code>、<code>p</code>、<code>h1</code>...<code>h6</code>、<code>ol</code>、<code>ul</code>、<code>dl</code>、<code>li</code>、<code>table</code>、<code>form</code></p><h5 id="行内块" tabindex="-1"><a class="header-anchor" href="#行内块" aria-hidden="true">#</a> 行内块</h5><p><code>img</code>和表单元素是特殊的行内块，他们既可以设置宽度高度，也能并排显示</p><h4 id="相互转换" tabindex="-1"><a class="header-anchor" href="#相互转换" aria-hidden="true">#</a> 相互转换</h4><p>使用 <code>dispaly</code>属性</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 转换为块级元素 */</span>
<span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
<span class="token comment">/* 转换为行内元素 */</span>
<span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span>
<span class="token comment">/* 转换为行内块元素 */</span>
<span class="token property">dispaly</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="元素的隐藏" tabindex="-1"><a class="header-anchor" href="#元素的隐藏" aria-hidden="true">#</a> 元素的隐藏</h4><ul><li>使用 <code>display:none;</code>可以将元素隐藏，元素将彻底放弃位置，如同没有写它的标签一样</li><li>使用 <code>visibility:hidden;</code>可以也可以将元素隐藏，但是元素不会放弃自己的位置</li></ul>`,10);function J(i,$){const t=o("ExternalLinkIcon"),c=o("Badge"),l=o("CodePen");return d(),r("div",null,[h,n("p",null,[a("其他伪类见："),n("a",g,[a("css 伪类"),s(t)])]),k,n("h3",m,[v,a(" 属性选择器 "),s(c,{text:"不常用",type:"warning"})]),b,n("h3",x,[f,a(" 伪元素 "),s(c,{text:"css3新增",type:"tip"})]),y,n("p",null,[_,a(": "),n("a",S,[a(":not()"),s(t)]),a("伪类不参与优先级计算，但:not() 里边的 “选择器” 是参与优先级计算:"),n("a",q,[a("参考"),s(t)]),a(","),w,a(":选择器 div.outer p 和选择器 div:not(.outer) p 的优先级是相同的，:not 被忽略掉了，:not(.outer)中的.outer 正常计数")]),C,n("p",null,[n("a",z,[a("参考 MDN 文档"),s(t)])]),N,n("div",I,[E,n("p",null,[n("a",W,[a("前端小知识--为什么你写的 height:100%不起作用？"),s(t)])]),n("p",null,[n("a",j,[a("学透 CSS-7 个场景让你深入理解 min/max - width/height"),s(t)])])]),M,n("ol",null,[F,n("li",null,[a("元素的高度、宽度及顶部和底部边距不可设置。可以设置"),L,a(","),B,a(","),D,a(","),T,a(" （水平方向有效，竖直方向无效）,"),n("a",Y,[a("可以设置行高"),H,s(t)])]),G]),O,n("div",V,[A,s(l,{link:"https://codepen.io/zhangfanhang/pen/WNyGWGM",theme:i.$isDarkMode?"dark":"light"},null,8,["theme"])]),P])}const U=p(u,[["render",J],["__file","基础与盒模型.html.vue"]]);export{U as default};
