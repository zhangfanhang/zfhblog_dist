import{ac as c,H as t,I as p,G as n,U as s,O as o,ad as a,X as l}from"./framework-fadc5609.js";const i={},d=a(`<h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><h3 id="变量的默认值" tabindex="-1"><a class="header-anchor" href="#变量的默认值" aria-hidden="true">#</a> 变量的默认值</h3><ol><li><p>一个变量只定义，但没有赋初值，默认值是 <code>undefined</code></p></li><li><p>一个变量只有被 <code>var</code> 定义，并赋初值之后，才算正式初始化完成</p></li></ol><h3 id="变量的常见错误" tabindex="-1"><a class="header-anchor" href="#变量的常见错误" aria-hidden="true">#</a> 变量的常见错误</h3><div class="hint-container warning"><p class="hint-container-title">注意</p><p>虽然可以通过省略 <code>var</code> 操作符定义全局变量，但不推荐这么做。在局部作用域中定义的全局变量很难维护，也会造成困惑。这是因为不能一下子断定省略 <code>var</code> 是不是有意而为之。在严格模式下，如果像这样给未声明的变量赋值，则会导致抛出错误</p></div><ul><li>不用 <code>var</code> 定义，而直接将值赋予它，虽不引发报错，但会<strong>产生作用域问题:</strong></li></ul><p>在函数外，用 <code>var </code>声明的变量为全局变量，不用 <code>var</code> 声明的变量也为全局变量。全局变量其实是在 <code>window </code>对象中添加属性并赋值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span> <span class="token comment">// 使用var声明</span>
b <span class="token operator">=</span> <span class="token number">456</span> <span class="token comment">// 不使用var声明</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 123</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// 456</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// 123</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token comment">// 456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在函数中，用 <code>var</code> 声明的变量为局部变量，<strong>不用 <code>var </code>声明的变量为全局变量</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span> <span class="token comment">// 使用var声明</span>
  b <span class="token operator">=</span> <span class="token number">456</span> <span class="token comment">// 不使用var声明</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 123</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// 456</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// undefined</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token comment">// 456</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// 456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>delete</code> 用来删除对象的属性，如果是不能删除的属性返回 <code>false</code>，其他情况返回 <code>true</code>,可以看到，变量 <code>a</code> <code>b</code> 都是全局变量，同为 <code>window </code>对象的其中一个属性，<code>a</code> 不可以删除，<code>b</code> 可以删除</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span> <span class="token comment">// 使用var声明</span>
b <span class="token operator">=</span> <span class="token number">456</span> <span class="token comment">// 不使用var声明</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// 123</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token comment">// 456</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">delete</span> a<span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">delete</span> b<span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// 123</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即：<strong>同为全局变量，同为 <code>window </code>对象的其中一个属性，用 <code>var</code> 声明的变量不可以删除，不用 <code>var</code> 声明的变量可以删除！</strong></p><p>对象属性是否可删除, 其实是可以配置的:</p><p><code>Object.getOwnPropertyDescriptor()</code>方法返回某个对象属性的描述对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span> <span class="token comment">// 使用var声明</span>
b <span class="token operator">=</span> <span class="token number">456</span> <span class="token comment">// 不使用var声明</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// {value: 123, writable: true, enumerable: true, configurable: false}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// {value: 456, writable: true, enumerable: true, configurable: true}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到 <code>window</code> 对象的属性 <code>a </code>和 <code>b</code> 的描述对象包含以下信息:</p><ul><li><code>value</code>属性的值</li><li><code>writable</code> 属性是否可被修改，布尔值</li><li><code>enumerable</code> 属性是否可被枚举(遍历)，布尔值</li><li><code>configurable</code> 属性是否可以被删除，布尔值</li><li>属性 <code>a</code> 和 <code>b</code> 的描述对象区别在于是否可删除, 这个特性属性 <code>a</code> 为 <code>configurable: false</code> 不可删除,属性 <code>b</code> 为 <code>configurable: true</code> 可删除</li></ul><p>即：<strong>对象的属性是否可删除，取决于描述对象的属性 <code>configurable</code>，用 <code>var</code> 声明的变量默认不可删除，不用 <code>var</code> 声明的变量默认可删除</strong></p><p>经过下面代码在浏览器中测试，<strong>var 定义的全局变量，无法修改它的 <code>configurable</code> 属性，即它无法被修改为可删除。<strong>而不使用 <code>var </code>声明的全局变量</strong>可以修改</strong>它的 <code>configurable</code> 属性：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span> <span class="token comment">// 使用var声明</span>
b <span class="token operator">=</span> <span class="token number">456</span> <span class="token comment">// 不使用var声明</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 默认为true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">delete</span> b<span class="token punctuation">)</span> <span class="token comment">// fasle</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//无法重新定义属性: a at Function.defineProperty</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),u={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty",target:"_blank",rel:"noopener noreferrer"},r=a(`<ul><li>尝试使用一个既没有被<code>var</code>定义过，也没有赋过值的字符就会产生引用错误。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">//  b is not defined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="变量的合法命名" tabindex="-1"><a class="header-anchor" href="#变量的合法命名" aria-hidden="true">#</a> 变量的合法命名</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>变量，函数，对象的属性 一般都采用<strong>小驼峰命名法</strong>，类名，构造函数采用<strong>大驼峰命名法</strong>，即<strong>首字母也要大写</strong></p><p><strong>关键字、保留字、<code>true</code>、<code>false</code> 和 <code>null</code> ,<code>undefined</code>不能作为标识符</strong></p></div><p><strong><code>标识符</code>就是变量，函数，属性或函数参数的名称</strong></p><ul><li><p>只能由 <strong>字母、数字、下划线、$</strong> 组成，但 <strong>不能</strong> 以数字开头</p></li><li><p>不能是关键字或保留字</p></li><li><p>大小写敏感，<code>a </code>和 <code>A </code>两个不同的变量</p></li></ul><h3 id="变量声明的提升" tabindex="-1"><a class="header-anchor" href="#变量声明的提升" aria-hidden="true">#</a> 变量声明的提升</h3><p>你可以提前使用一个稍后才声明的变量，而不会引发异常</p><p>变量声明提升时，<strong>只提升变量的定义</strong>到当前作用域（全局作用域或者函数作用域）的顶部，<strong>不会提升它的值</strong></p><ul><li>全局作用域：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// 输出undefined</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">12</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>函数作用域：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span>
<span class="token comment">// 函数作用域</span>
<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
  <span class="token comment">// var 声明的变量没有块级作用域</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">456</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">看道题</p><p>下列代码输出结果是?</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> val <span class="token operator">=</span> <span class="token number">12</span>
<span class="token keyword">function</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
  <span class="token keyword">var</span> val <span class="token operator">=</span> <span class="token number">20</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// undefined</span>
<span class="token comment">// 20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="js-基本数据类型" tabindex="-1"><a class="header-anchor" href="#js-基本数据类型" aria-hidden="true">#</a> JS 基本数据类型</h2>`,15),k={href:"https://juejin.cn/post/6942880039897825294",target:"_blank",rel:"noopener noreferrer"},v=a(`<h3 id="数据类型分类" tabindex="-1"><a class="header-anchor" href="#数据类型分类" aria-hidden="true">#</a> 数据类型分类</h3><ul><li>基本数据类型：<code>string</code>,<code>boolean</code>,<code>number</code>,<code>symbol</code>（ES6 新增）,<code>undefined</code>, <code>null</code></li><li>引用数据类型：<code>object</code></li><li>js 的常见内置对象：<code>Date</code>,<code>Array</code>,<code>Math</code>,<code>Number</code>,<code>Boolean</code>,<code>String</code>,<code>Array</code>,<code>RegExp</code>,<code>Function</code>...</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>其中 <code>Symbol</code> 是 <code>ES6</code> 中新增的数据类型：</p><p><code>Symbol</code>符号是原始值，且符号实例是唯一、不可变的。 符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突的危险。</p><p><strong>更多 <code>Symbol</code> 细节见 <code>ES6</code> 章节</strong></p></div><h3 id="基本数据类型和引用数据类型的区别" tabindex="-1"><a class="header-anchor" href="#基本数据类型和引用数据类型的区别" aria-hidden="true">#</a> 基本数据类型和引用数据类型的区别</h3><p>内存的分配不同</p><ul><li>基本数据类型存储在栈中</li><li>复杂数据类型存储在堆中，栈中存储的变量，是指向堆中的引用地址</li></ul><p>访问机制不同</p><ul><li>基本数据类型是按值访问</li><li>复杂数据类型按引用访问，<code>JS</code> 不允许直接访问保存在堆内存中的对象，在访问一个对象时，首先得到的是这个对象在堆内存中的地址，然后再按照这个地址去获得这个对象的值</li></ul><p>复制变量时不同<code>a=b</code></p><ul><li><p>基本数据类型：<code>a=b</code>;是将 <code>b</code> 中保存的原始值的副本赋值给新变量 <code>a</code>,<code>a</code> 和 <code>b</code> 完全独立，互不影响</p></li><li><p>复杂数据类型：<code>a=b</code>;将 <code>b</code> 保存的对象内存的引用地址赋值给了新变量 <code>a</code>;<code>a </code>和 <code>b </code>指向了同一个堆内存地址，其中一个值发生了改变，另一个也会改变</p></li></ul><p>比较变量时不同<code>==</code> , <code>===</code></p><ul><li><p>基本数据类型：<code>==</code><strong>先进行类型转换再确定操作数的值是否相等</strong>，<code>===</code>不仅比较值是否相等，还会比较数据类型是否相同</p></li><li><p>引用数据类型：不管是 <code>==</code> 还是 <code>===</code> ，都是比较内存地址是否相同，即比较是否都指向同一个对象</p></li></ul><p>参数传递的不同(实参/形参)</p><p>函数传参都是按值传递(栈中的存储的内容)：基本数据类型，拷贝的是值；复杂数据类型，拷贝的是引用地址</p><h3 id="typeof-运算符" tabindex="-1"><a class="header-anchor" href="#typeof-运算符" aria-hidden="true">#</a> typeof 运算符</h3><div class="hint-container warning"><p class="hint-container-title">注意</p><ul><li><p>调用 <code>typeof null</code> 返回的是<code>&quot;object&quot;</code>。这是因为特殊值 <code>null </code>被认为是一个对空对象的引用</p></li><li><p>严格来讲，函数在 <code>ECMAScript</code> 中被认为是对象，并不代表一种数据类型。可是， 函数也有自己特殊的属性。为此，就有必要通过 <code>typeof</code> 操作符来区分函数和其他对象。</p></li></ul></div><p>对一个值使用 <code>typeof </code>操作符会返回下列字符串之一：</p><ul><li><code>&quot;undefined&quot;</code>表示值未定义</li><li><code>&quot;boolean&quot;</code>表示值为布尔值</li><li><code>&quot;string&quot;</code>表示值为字符串</li><li><code>&quot;number&quot;</code>表示值为数值</li><li><code>&quot;object&quot;</code>表示值为对象（而不是函数）或 <code>null</code></li><li><code>&quot;function&quot;</code>表示值为函数</li><li><code>&quot;symbol&quot;</code>表示值为符号。</li></ul><h3 id="number-数字类型" tabindex="-1"><a class="header-anchor" href="#number-数字类型" aria-hidden="true">#</a> number 数字类型</h3><ul><li>所有数字不分大小，不分整浮，不分正负，都是数字类型</li><li>介于 0 和 1 之间的小数，0 可以省略</li></ul><h4 id="科学计数法" tabindex="-1"><a class="header-anchor" href="#科学计数法" aria-hidden="true">#</a> 科学计数法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>3e8 -&gt; 300000000
3e-4 -&gt; 0.0003
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="不同进制的数字" tabindex="-1"><a class="header-anchor" href="#不同进制的数字" aria-hidden="true">#</a> 不同进制的数字</h4><ul><li>二进制以 0b 开头</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">0b10</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>八进制以 0 开头</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">017</span> <span class="token comment">// 15</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>十六进制以 0x 开头</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">0xf</span> <span class="token comment">// 15</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="特殊的数字型值-nan" tabindex="-1"><a class="header-anchor" href="#特殊的数字型值-nan" aria-hidden="true">#</a> 特殊的数字型值 NaN</h4>`,30),m=n("li",null,[n("code",null,"typeof NaN // number")],-1),b=n("li",null,"0 除以 0 的结果是 NaN，事实上，在数学运算中，若结果不能得到数字，其结果往往都是 NaN",-1),g=n("code",null,"NaN ",-1),h={href:"https://juejin.cn/post/6844904200233566222",target:"_blank",rel:"noopener noreferrer"},f=a(`<div class="hint-container tip"><p class="hint-container-title">原因</p><p><strong><code>NaN</code>是一种异常的结果</strong>，也就是“<code>not a number</code>”，虽然它也是一个变量，但它是描述性变量，&#39;a&#39;不是一个数字（<code>not a number</code>），&#39;b&#39;也不是一个数字（<code>not a number</code>），但是&#39;a&#39;和&#39;b&#39;并不相等，所以<code>NaN != NaN</code>也就成立了。</p></div><ul><li>如何判断某变量值为<code>NaN</code>:<code>isNaN()</code>函数可以用来判断变量值是否为<code>NaN</code>,但 <code>isNaN()</code>也不好用，它的机理是：只要该变量传入<code>Number()</code>的执行结果是<code>NaN</code>，则 <code>isNaN()</code>函数都会得到 true</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">//false</span>
<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">//true</span>
<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;我懂得&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string-字符串类型" tabindex="-1"><a class="header-anchor" href="#string-字符串类型" aria-hidden="true">#</a> string 字符串类型</h3><ul><li><p>数字 11 和字符串&quot;11&quot;在语义上是不同的，前者表达一个数量，后者是一个文本</p></li><li><p>加号可以用来拼接多个字符串</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;zha&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;ng&#39;</span> <span class="token comment">// &#39;zhang&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>要将一个变量的值“插入”到字符串中，要“斩断链接&quot;</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> year <span class="token operator">=</span> <span class="token number">2022</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str <span class="token operator">=</span><span class="token string">&#39;zfh&#39;</span><span class="token operator">+</span>year<span class="token operator">+</span>‘哈哈’ <span class="token comment">//zfh2022哈哈</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>空字符串，直接书写闭合的引号对即可</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>字符串的 <code>length </code>属性</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;abcd&#39;</span><span class="token punctuation">.</span>length <span class="token comment">//4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="字符串的常用方法" tabindex="-1"><a class="header-anchor" href="#字符串的常用方法" aria-hidden="true">#</a> 字符串的常用方法</h4><p><code>charAt()</code>:可以得到指定位置的字符</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;abcd&#39;</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//b</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>substring()</code> ,<code>substr()</code>和 <code>slice()</code>方法</p><ul><li>substring()</li></ul><ol><li><code>substring(a,b)</code>可以得到从 <code>a</code> 开始到 <code>b</code> 结束（左闭右开，<strong>不包括 <code>b</code> 处</strong>）的子串</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;abcd&#39;</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//‘ab&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li><code>substring(a,b)</code>方法如果省略第二个参数，返回的子串会一直到字符串的结尾</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;abcd&#39;</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//‘bcd&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>substring(a,b)中，a 可以大于 b，数字顺序将自动调整为小数在前</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;abcd&#39;</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//‘c&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>如果任一参数小于 0 或为 <code>NaN</code>，则被当作 0</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;abcd&#39;</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// &#39;ab&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>如果任一参数大于字符串长度，则被当成字符串长度</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;abcd&#39;</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// &#39;abcd&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>substr()</li></ul><div class="hint-container warning"><p class="hint-container-title">警告</p><p>尽管 <code>String.prototype.substr(…)</code> 没有严格被废弃 (as in &quot;removed from the Web standards&quot;), 但<strong>它被认作是遗留的函数并且可以的话应该避免使用</strong>。它并非<code>JavaScript</code>核心语言的一部分，未来将可能会被移除掉。如果可以的话，使用 <code>substring</code>() 替代它</p></div><ul><li>slice()</li></ul><ol><li><code>slice(a,b)</code>方法得到从<code>a</code>开始到 <code>b </code>结束（不包括 <code>b</code> 处）的<strong>子串</strong>,不会改变原字符串</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;abcd&#39;</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//‘ab&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li><code>slice(a,b)</code>的参数可以是负数,表示倒数位置</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;abcd&#39;</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// &#39;c&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li><code>slice(a,b)</code>中，索引值 <code>a</code> 对应的位置必须在索引值 <code>b</code> 之前</li></ol><p><code>toUpperCase()</code>,<code>toLowerCase()</code></p><ul><li><code>toUpperCase()</code> 转为大写</li><li><code>toLowerCase()</code> 转为小写</li></ul><p><code>indexOf()</code></p><ul><li><code>index0f()</code>方法返回某个指定的字符串值在字符串中首次出现的位置</li><li>如果要检索的字符串值没有出现，则该返回-1</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;abcd&#39;</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>
<span class="token string">&#39;abcd&#39;</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;e&#39;</span><span class="token punctuation">)</span> <span class="token comment">// -1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>includes()</code></p><p><code>includes()</code> 方法用于判断一个字符串是否包含在另一个字符串中，根据情况返回 <code>true</code> 或 <code>false</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;Hello world&#39;</span>
<span class="token keyword">var</span> n <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>replace</code>和<code>replaceAll</code></p><ul><li><code>replace</code>方法用于在字符串中用一些字符替换另一些字符,或替换一个与正则表达式匹配的子串。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;正则要好好看下，好好看下&#39;</span>
<span class="token keyword">var</span> n <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&#39;好好看下&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;好好看个p&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>replaceAll</code>方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串，该函数会替换所有匹配到的子字符串。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;正则要好好看下，好好看下&#39;</span>
<span class="token keyword">var</span> n <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&#39;好好看下&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;好好看个p&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="boolean-类型" tabindex="-1"><a class="header-anchor" href="#boolean-类型" aria-hidden="true">#</a> boolean 类型</h3><p>布尔型值只有两个：<code>true </code>和 <code>false</code>，分别表示真和假</p><h3 id="undefined-类型" tabindex="-1"><a class="header-anchor" href="#undefined-类型" aria-hidden="true">#</a> undefined 类型</h3><p><code>undefined</code> 表示一个变量自然的、最原始的状态值，就是此处应该有一个值，但是还没有定义</p><p><code>undefined </code>又是值，又是一种类型，这种类型只有它自己一个值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span> <span class="token keyword">undefined</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>undefined</code>一般会在以下 4 种场景中出现：</p><ul><li>声明了一个变量，但没有赋值，就等于 <code>undefined</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>函数定义了形参，但没有传递实参，该参数等于 <code>undefined</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//函数定义了形参 a</span>
<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// undefined</span>
<span class="token punctuation">}</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//未传递实参</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>访问对象上不存在的属性，该属性的值为 <code>undefined</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
a<span class="token punctuation">.</span>p <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>函数没有返回值时，默认返回 <code>undefined</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
a <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="null-类型" tabindex="-1"><a class="header-anchor" href="#null-类型" aria-hidden="true">#</a> null 类型</h3><p><code>null</code> 表示一个变量被人为的设置为空对象，而不是原始状态，即该处不应该有值</p><p>使用 <code>typeof </code>检测 <code>null</code> 值，结果是<code> object</code>，这点 <strong>尤其要注意</strong> ,类型和 <code>typeof </code>检测结果并不总是一一对应，比如数组用 <code>typeof</code> 检测结果也是 <code>object</code></p><p><code>null</code>一般会在以下 2 种场景中出现：</p><ul><li>利用 <code>document.getElementById(‘XXX’)</code> 寻找一个不存在的元素，将返回 <code>null</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;notExistElement&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>作为对象原型链的终点</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="null-和-undefined-的区别" tabindex="-1"><a class="header-anchor" href="#null-和-undefined-的区别" aria-hidden="true">#</a> null 和 undefined 的区别</h3><div class="hint-container tip"><p class="hint-container-title">最佳实践</p><p>在实际使用过程中，为了保证变量所代表的语义，不要对一个变量显式的赋值 <code>undefined</code>，当需要释放一个对象时，直接赋值为 <code>null</code> 即可</p></div>`,73),j={href:"https://juejin.cn/post/6844903831071883277",target:"_blank",rel:"noopener noreferrer"},y=a(`<ol><li><p>数据类型不同</p></li><li><p>转换为数值区别:<code>null </code>是一个表示&quot;无&quot;的对象，转为数值时为 0；<code>undefined</code> 是一个表示&quot;无&quot;的原始值，转为数值时为 NaN</p></li><li><p><code>null == undefined</code>会返回<code>true</code>，因为它们是类似的值；但<code>null === undefined</code>会返回<code>false</code>，因为它们是不同类型的值。</p></li></ol><h2 id="数据类型转换" tabindex="-1"><a class="header-anchor" href="#数据类型转换" aria-hidden="true">#</a> 数据类型转换</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在 JS 中类型转换只有三种情况，分别是：<strong>转换为布尔值</strong>,<strong>转换为数字</strong>,<strong>转换为字符串</strong></p></div><figure><img src="https://zfh-nanjing-bucket.oss-cn-nanjing.aliyuncs.com/blog-images/数据类型转换全面.png" alt="数据类型转换全面" tabindex="0"><figcaption>数据类型转换全面</figcaption></figure><h3 id="转数字" tabindex="-1"><a class="header-anchor" href="#转数字" aria-hidden="true">#</a> 转数字</h3><p>有 3 个函数可以将非数值转换为数值：<code>Number()</code>、<code>parseInt()</code>和 <code>parseFloat()</code>。<code>Number()</code>是转型函数，可用于任何数据类型。后两个函数主要用于将字符串转换为数值。对于同样的参数，这 3 个函数执行的操作也不同:</p><h4 id="number" tabindex="-1"><a class="header-anchor" href="#number" aria-hidden="true">#</a> Number()</h4><ol><li><p>布尔值：<code>true </code>和<code> false</code> 将分别被转为 1 和 0</p></li><li><p>数字值，直接返回</p></li><li><p><code>null</code> 值，返回 0</p></li><li><p><code>undefined</code>，返回 <code>NaN</code></p></li><li><p>如果是字符串：</p></li></ol><ul><li><p>如果字符串中只包含数字（包括前面带正负号的情况），则转换为十进制数</p></li><li><p>如果是空字符串，则转换为 0</p></li><li><p>如果包含有效的浮点格式，则转换为浮点数值</p></li><li><p>如果包含非数字内容，则转换为 <code>NaN</code></p></li></ul><h4 id="parseint" tabindex="-1"><a class="header-anchor" href="#parseint" aria-hidden="true">#</a> parseInt()</h4><div class="hint-container tip"><p class="hint-container-title">最佳实践</p><p>不传底数参数相当于让 <code>parseInt()</code>自己决定如何解析，所以为了避免出错，请始终传给它第二个参数</p></div><p><code>parseInt()</code>可以为函数提供第二个参数：转换时使用的基数(2,8,10,16)</p><p>它的工作方式是：</p><ul><li><p>如果第一个字符不是数字字符或者正负号，则返回 <code>NaN</code>(用 <code>parseInt()</code>转换空字符串时会返回 NaN)</p></li><li><p>如果遇到的第一个字符是数字字符，<code>parseInt()</code>会继续解析后面的字符，直到解析完所有字符或遇到了非数字字符</p></li></ul><h4 id="parsefloat" tabindex="-1"><a class="header-anchor" href="#parsefloat" aria-hidden="true">#</a> parsefloat()</h4><p>也是从第一个字符开始解析，一直到字符串末尾或者遇见一个无效的浮点数字字符为止</p><p>字符串中第一个小数点是有效地，而第二个小数点就是无效的了</p><p>十六进制字符串会始终被转换成 0</p><p>只解析十进制值，所以不指定第二个参数</p><p>如果字符串包含的是一个可解析为整数的数（没有小数点或者小数点后面都是零），则返回整数值</p><h3 id="转布尔" tabindex="-1"><a class="header-anchor" href="#转布尔" aria-hidden="true">#</a> 转布尔</h3><p>在条件判断时，除了 <code>undefined</code>， <code>null</code>，<code>false</code>，<code>NaN</code>，<code>&#39;&#39;</code>， <code>0</code>，<code>-0</code>，<strong>其他所有值都转为 true，包括所有对象。</strong></p><h4 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> !!</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>a<span class="token punctuation">,</span> <span class="token operator">!</span><span class="token operator">!</span>b<span class="token punctuation">,</span> <span class="token operator">!</span><span class="token operator">!</span>c<span class="token punctuation">)</span> <span class="token comment">// true false true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="boolean" tabindex="-1"><a class="header-anchor" href="#boolean" aria-hidden="true">#</a> Boolean()</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true false true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="转字符串" tabindex="-1"><a class="header-anchor" href="#转字符串" aria-hidden="true">#</a> 转字符串</h3><h4 id="tostring" tabindex="-1"><a class="header-anchor" href="#tostring" aria-hidden="true">#</a> toString()</h4><p>该方法可以用于数值，布尔值，对象，字符串值;null,undefined 没有该方法</p><p>当数值调用该方法时，可以传入一个底数参数,表示以什么底数输出数值的字符串表示</p><h4 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String()</h4><p>String()转型函数遵循以下规则：</p><ul><li>如果值有 toString()方法，则调用该方法(不传参数)并返回结果</li><li>如果值是 null，返回“null”</li><li>如果值是 undefined,返回“undefined”</li></ul><h4 id="用-➕-操作符加上一个空字符串" tabindex="-1"><a class="header-anchor" href="#用-➕-操作符加上一个空字符串" aria-hidden="true">#</a> 用 ➕ 操作符加上一个空字符串“”</h4><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">11233333333123</span>

<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span>

<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>

<span class="token keyword">const</span> bool <span class="token operator">=</span> <span class="token boolean">true</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// string</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>obj <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// string</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>obj <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// string</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>bool <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// string</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token operator">+</span>str<span class="token punctuation">)</span> <span class="token comment">// number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对象转原始类型" tabindex="-1"><a class="header-anchor" href="#对象转原始类型" aria-hidden="true">#</a> 对象转原始类型</h3><p>对象在转换类型的时候，会调用内置的 <code>Symbol.ToPrimitive</code> 函数，对于该函数来说，算法逻辑一般来说如下：</p><ul><li>如果已经是原始类型了，那就不需要转换了</li><li>调用 x.valueOf()，如果转换为基础类型，就返回转换的值</li><li>调用 x.toString()，如果转换为基础类型，就返回转换的值</li><li>如果都没有返回原始类型，就会报错</li></ul><p>当然你也可以重写 <code>Symbol.toPrimitive</code> ，该方法在转原始类型时调用优先级最高。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;1&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toPrimitive<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">2</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token number">1</span> <span class="token operator">+</span> a <span class="token comment">// =&gt; 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,40);function w(x,N){const e=l("ExternalLinkIcon");return t(),p("div",null,[d,n("p",null,[s("参考："),n("a",u,[s("Object.defineProperty()"),o(e)])]),r,n("p",null,[n("a",k,[s("深入理解 js 数据类型与堆栈内存"),o(e)])]),v,n("ul",null,[m,b,n("li",null,[g,s("不自等:"),n("a",h,[s("NaN 不等于 NaN"),o(e)])])]),f,n("p",null,[n("a",j,[s("undefined vs null"),o(e)])]),y])}const q=c(i,[["render",w],["__file","变量与数据类型.html.vue"]]);export{q as default};
